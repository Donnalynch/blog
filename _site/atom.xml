<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>www.batsov.com</title>
  <link href="http://www.batsov.com/"/>
  <link type="application/atom+xml" rel="self" href="http://www.batsov.com/atom.xml"/>
  <updated>2011-05-18T16:39:17+03:00</updated>
  <id>http://www.batsov.com/</id>
  <author>
    <name>Bozhidar Batsov</name>
    <email>bozhidar.batsov@gmail.com</email>
  </author>

  
  <entry>
    <id>http://www.batsov.com/Ruby/Java/2011/05/18/jvm-langs-jruby</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Ruby/Java/2011/05/18/jvm-langs-jruby.html"/>
    <title>Java.next() - JRuby: The Rubyists Strike Back</title>
    <updated>2011-05-18T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;h1 id=&quot;overture&quot;&gt;Overture&lt;/h1&gt;

&lt;p&gt;So far in the Java.next() series I’ve discussed only languages that
were engineered from the start to run on the JVM (&lt;a href=&quot;/Java/Groovy/2011/05/06/jvm-langs-groovy.html&quot;&gt;Groovy&lt;/a&gt;, &lt;a href=&quot;/Java/Scala/2011/05/08/jvm-langs-scala.html&quot;&gt;Scala&lt;/a&gt; and
&lt;a href=&quot;/Clojure/Java/2011/05/12/jvm-langs-clojure.html&quot;&gt;Clojure&lt;/a&gt;). However, a lot of good programming languages existed even
before the inception of the idea to run languages other than Java on top of
the JVM. Some notable examples are Ruby and Python for instance. Today
I’ll be writing about &lt;a href=&quot;http://jruby.org/&quot;&gt;JRuby&lt;/a&gt; - the pure Java port of the Ruby
programming language (and undoubtedly the most advanced and widely
adopted of the 9 (!) actively maintained Ruby ports).&lt;/p&gt;

&lt;p&gt;This post will differ somewhat from the others so far, because I won’t
be spending any time to dwell on the basic Ruby syntax and will only
highlight the advantages over plain old Ruby that JRuby provides -
like calling Java code from a Ruby application and scripting Ruby from a
Java application.&lt;/p&gt;

&lt;h1 id=&quot;why-jruby&quot;&gt;Why JRuby?&lt;/h1&gt;

&lt;p&gt;Ruby has long been known as one of the most elegant programming
languages out there. With the rise of the Rails web framework several
years ago the language was propelled into the mainstream and showed a
lot of common developers alternative (better) ways to get their jobs done with
less hassle and more grace. While the language is generally well liked
(albeit is has some syntax quirks and oddities, mostly courtesy of its
Perl heritage) its default execution environment MRI (Matz’s Ruby
Interpreter) is not the object of international affection. As an
application written in C it suffers some portability problems (a few
years ago it was quite hard to get MRI to run properly on Windows and
even now you might run into some missing dll error from time to
time). MRI’s performance is not stellar either and it even used to be
quite terrible before the advent of Ruby 1.9 which incorporated YARV
(Yet Another Ruby VM), which significantly improved its performance
(but still left a what to be desired). There is also the problem with
the missing standard portable GUI development library and the somewhat
limited deployment options because of MRI’s limited
portability. &lt;/p&gt;

&lt;p&gt;Matz’s has often said that he’s no VM specialist, he’s a
language architect/designer and the beauty of the language concerns
him more than the performance of the reference implementation. He’s
also said that he loves diversity and is certain that interested
parties will offer high quality alternatives to the standard Ruby
runtime. &lt;/p&gt;

&lt;p&gt;When it comes down to a high quality runtimes few people don’t start
thinking immediately about the Java platform, known for its infinite
(not literally infinite of course, but vast enough) libraries,
rock-solid and secure JVM and great support for compile-time and
runtime performance
optimizations. It’s not unheard for a Java application to match and
excel the performance of a native C application by employing
techniques like &lt;em&gt;just in time&lt;/em&gt;(JIT) compilation, hot spot detection and
optimizations, etc.&lt;/p&gt;

&lt;p&gt;So it’s only natural that at some point a bunch of people decided to
create a version of Ruby that could run on top of the acclaimed
JVM. This version of Ruby is (believe it or not) known as JRuby. With
JRuby you get the best of both Java and the Ruby worlds. Here are just a few possibilities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deploy a Ruby on Rails web application to Google’s App Engine
service.&lt;/li&gt;
  &lt;li&gt;Write a Rails web frontend to your existing Java enterprise
application.&lt;/li&gt;
  &lt;li&gt;Target the latest Android smartphones with your Ruby code using &lt;a href=&quot;http://ruboto.org/&quot;&gt;Ruboto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Create cross-platform GUIs with Java’s Swing (or SWT)&lt;/li&gt;
  &lt;li&gt;Build your project on solid libraries written in Java, Scala, Clojure,
or other JVM languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great prospects indeed! Now it’s about time to get that magical piece
of software called JRuby up and running…&lt;/p&gt;

&lt;h1 id=&quot;installing-jruby&quot;&gt;Installing JRuby&lt;/h1&gt;

&lt;p&gt;There are several options to consider in the department of JRuby
installation. JRuby requires a Java runtime 5.0+ to be installed. You
can get one from &lt;a href=&quot;http://www.oracle.com/technetwork/java/index.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using an Installer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The easiest way to install JRuby is to use one of the prebuilt installers
available from the &lt;a href=&quot;http://jruby.org/download&quot;&gt;official download site&lt;/a&gt;. These will take care of the
low level of detail, such as setting up your &lt;strong&gt;PATH&lt;/strong&gt; environment
variable to make finding JRuby easier.
The JRuby team currently maintains installers for Windows and Mac
machines. If you’re on Linux, your distribution may package its own
JRuby build. For example, on Ubuntu (or any other Debian derived
distro) you can type this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo apt-get install jruby
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Red Had distribution users might try this incantation instead:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo yum install jruby
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Most Linux distributions don’t upgrade to the latest JRuby release the
instant it comes out. If you want to stay with the latest and greatest,
you might prefer installing from an archive instead or RVM instead.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using RVM&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most Ruby hackers
favour a powerful bash script called RVM(Ruby Version Manager) that
allows you to install several different version(or flavours of Ruby)
and switch easily between them. Please refer to the official
&lt;a href=&quot;https://rvm.beginrescueend.com/&quot;&gt;RVM documentation&lt;/a&gt; for installation
and usage instructions. After you’ve installed RVM getting JRuby
installed is a child’s play:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rvm list known | grep jruby
&lt;span class=&quot;go&quot;&gt;jruby-1.2.0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-1.3.1&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-1.4.0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-1.6.0&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby[-1.6.1]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-head&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rvm install jruby
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rvm use jruby
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Just for the record - I personally use RVM and I recommend to all
*BSD, Linux &amp;amp; OS X hackers to try it out as well - great piece of
software. One of the nicer side effects of using RVM is that you won’t
have to run operations like &lt;strong&gt;gem install&lt;/strong&gt; as the root user.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using prebuilt archive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you have a heavily customized setup or just like doing things
yourself, you can get a .zip or .tar.gz archive from the same download
page. Extract the archive somewhere convenient on your system, such
as &lt;strong&gt;C:** or **/opt&lt;/strong&gt;. You can run JRuby straight from its own &lt;em&gt;bin&lt;/em&gt;
folder, but you’ll probably find it more convenient to add it to
your PATH. On UNIX (including Linux &amp;amp; Mac OS X), you can do the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/opt/jruby/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Testing the installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Type the following commands:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; which jruby
&lt;span class=&quot;go&quot;&gt;~/.rvm/rubies/jruby-1.6.1/bin/jruby&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; jruby -version
&lt;span class=&quot;go&quot;&gt;jruby 1.6.1 (ruby-1.8.7-p330) (2011-04-12 85838f6) (Java HotSpot(TM) Server VM 1.6.0_22) [linux-i386-java]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; jruby -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;puts &amp;quot;Hello, JRuby!&amp;quot;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello, JRuby!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can see some of the unique JRuby features in action.&lt;/p&gt;

&lt;h1 id=&quot;common-tasks-with-jruby&quot;&gt;Common tasks with JRuby&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;REPL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JRuby comes with an equivalent of the standard Ruby REPL irb, called
jirb. To start it simply type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; jirb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you can do some interactive Ruby development:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;jruby-1.6.1 :001 &amp;gt; puts &amp;quot;Hello, JRuby&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Hello, JRuby&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; nil &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-1.6.1 :002 &amp;gt; arr = [&amp;quot;Chuck&amp;quot;, &amp;quot;Sarah&amp;quot;, &amp;quot;Morgan&amp;quot;, &amp;quot;Casey&amp;quot;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [&amp;quot;Chuck&amp;quot;, &amp;quot;Sarah&amp;quot;, &amp;quot;Morgan&amp;quot;, &amp;quot;Casey&amp;quot;] &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-1.6.1 :003 &amp;gt; arr.length&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; 4 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-1.6.1 :004 &amp;gt; arr.size&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; 4 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-1.6.1 :005 &amp;gt; arr.size()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; 4 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-1.6.1 :006 &amp;gt; arr.each { |name| puts name }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Chuck&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Sarah&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Morgan&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Casey&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [&amp;quot;Chuck&amp;quot;, &amp;quot;Sarah&amp;quot;, &amp;quot;Morgan&amp;quot;, &amp;quot;Casey&amp;quot;] &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;jruby-1.6.1 :007 &amp;gt; arr.each_with_index { |name, index| puts &amp;quot;#{index}: #{name}&amp;quot;}&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;0: Chuck&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;1: Sarah&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2: Morgan&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3: Casey&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [&amp;quot;Chuck&amp;quot;, &amp;quot;Sarah&amp;quot;, &amp;quot;Morgan&amp;quot;, &amp;quot;Casey&amp;quot;] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;jirb is a great tool for exploratory programming and has some nice
features like TAB completion. Use it often!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Running scripts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Same as before (with MRI Ruby):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; jruby some_script.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That was simple, right?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Running Ruby tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You should prefix calls to common Ruby tools like gem and rake with
&lt;strong&gt;jruby -S&lt;/strong&gt; - otherwise they might get confused which Ruby version
(if you have more than one Ruby installed, that is) to use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; jruby -S gem install rails
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; jruby -S rake install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Using the JRuby compiler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can compile Ruby scripts directly to Java bytecode and run the
resulting class files using the JVM:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; jrubyc hello.rb
&lt;span class=&quot;go&quot;&gt;Compiling hello.rb to class example&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The compiler supplies a main method for you, so you can now run the
program straight from the java command (adjust the path here to point
to your JRuby installation):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; java -cp .:/opt/jruby/lib/hello.jar example
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that your compiled program still depends on some JRuby-defined
support routines, so jruby.jar needs to be on your classpath. Also,
the compiler compiles only the files you specifically pass to it. If
you reference some_ruby_library.rb from hello.rb, you’ll have to
compile that extra .rb file yourself or ship it in source form
alongside your .class file. The Java compiler understands dependencies
between source files and compiles them automatically so Java
developers should keep this difference in mind.&lt;/p&gt;

&lt;h1 id=&quot;using-java-from-jruby&quot;&gt;Using Java from JRuby&lt;/h1&gt;

&lt;p&gt;One of the nicest features of JRuby is undoubtedly the ability to use
Java libraries directly in your Ruby code. JRuby goes a long way to
make the Java classes integrate into normal Ruby code as seamlessly as
possible - for instance it gives you the ability to call methods using the
snake_naming_convention, instead of the common in Java
camelCaseNamingConvention. Let’s see the Java integration in action:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;java&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java_import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;java.lang.System&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java_import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;java.util.ArrayList&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java_import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;javax.swing.JOptionPane&amp;#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Feel the power of JRuby&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# using snake_names for Java method names&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_time_millis&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# regular names work as well&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTimeMillis&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# the array list supports some common Ruby idioms&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;array_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;List length is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;array_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# a glimpse of Swing&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;JOptionPane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show_message_dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This is a message from the future of Ruby!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You shouldn’t, of course, use ArrayList unless you’re using a Java API
that is requiring you to do so. Hopefully these simple examples gave
you an idea how easy it is to access Java code from JRuby.&lt;/p&gt;

&lt;h1 id=&quot;using-jruby-from-java&quot;&gt;Using JRuby from Java&lt;/h1&gt;

&lt;p&gt;While Java libraries are capable of doing just about anything they are
generally not as elegant as some of their Ruby counterparts. This might
make you want to run some Ruby code from a Java program. JRuby allows
you do this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.jruby.embed.InvokeFailedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.jruby.embed.ScriptingContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RubyFromJava&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ScriptingContainer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ScriptingContainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runScriptlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;puts &amp;#39;Ruby bridge established successfully&amp;#39;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This example is quite basic, but you should be able to grasp the basic
idea from it.&lt;/p&gt;

&lt;h1 id=&quot;compatibility-with-standard-ruby-and-performance&quot;&gt;Compatibility with standard Ruby and performance&lt;/h1&gt;

&lt;p&gt;JRuby 1.6 is mostly compatible with MRI Ruby 1.9.2. Since Ruby doesn’t
have a formal standard and is mostly defined in terms of the reference
implementation (although there are some compatibility test suites)
alternative implementations like JRuby are bound to be a step behind
the current reference version from time to time. JRuby, however,
catches up very quickly and has reached a state in popularity and adoption
at which I’m certain that they (the JRuby team) keep an open communication channel with
upstream MRI developers and are capable to add the new features with
very little delay.&lt;/p&gt;

&lt;p&gt;In terms of performance JRuby is slightly faster in many tests than
MRI 1.9.2 and with the inclusion of support for dynamic method
dispatching in Java 7 (coming up later this year) the performance will
probably be improved significantly. The only real performance problem
is the JVM startup time. If you’re using JRuby to run very simple
scripts you might be mislead to believe that JRuby’s very slow, when actually the
delay you’re witnessing is caused by the JVM startup (which is not
very fast). Some Ruby features like ObjectSpace don’t perform very
well on the JVM as well, but they are used rarely.&lt;/p&gt;

&lt;p&gt;In a sentence - JRuby is quite compatible with the standard MRI Ruby
and one of the fastest Ruby implementations around.&lt;/p&gt;

&lt;h1 id=&quot;deployment-options-and-future-prospects&quot;&gt;Deployment options and future prospects&lt;/h1&gt;

&lt;p&gt;With JRuby your number of deployment options vastly improves - now you
can deploy your Ruby applications anywhere where a JVM can be run (and
there are lot such places, believe me about that). With JRuby you can
deploy your Rails applications on the Google App Engine or in a Java
enterprise container such as Glassfish. You can also write mobile
applications for the Android operating system.&lt;/p&gt;

&lt;p&gt;JRuby’s development is funded by a very solid company, called
&lt;a href=&quot;http://www.engineyard.com/&quot;&gt;“Engine Yard”&lt;/a&gt; which is famous for its world class Rails hosting
solutions. The company obviously has a lot at stake here and you
shouldn’t be afraid that JRuby might die anytime soon.&lt;/p&gt;

&lt;p&gt;IT consulting companies like
&lt;a href=&quot;http://www.thoughtworks.com/&quot;&gt;ThoughtWorks&lt;/a&gt; have used JRuby to deliver both products and customer
applications on far more aggressive schedules than they could
have with more conventional languages&lt;/p&gt;

&lt;h1 id=&quot;the-tools-of-the-trade&quot;&gt;The tools of the trade&lt;/h1&gt;

&lt;p&gt;Most Ruby hackers tend to program without the aid of sophisticated
IDEs. Emacs, vim and TextMate are popular choices. Recently
&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;SublimeText&lt;/a&gt; has been getting a fair share of attention as well. While
it’s fairly easy to write Ruby code in a text editor it’s generally a
nightmare to write Java code in an editor. Some of the most old-school
hardcore developers that I know bowed down before the complexity of
Java and started using Eclipse, NetBeans or IntelliJ to keep their
sanity intact. When you’re working on a project that’s a mixture of Ruby
and Java code it might be a good choice to opt for using some IDE as
well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; - The legendary Java IDE comes with a very capable
Ruby plug-in, that integrates well with Rails, the common templating
languages often used with it and most Ruby testing
frameworks. IntelliJ even has a variant for pure Ruby development
called &lt;a href=&quot;http://www.jetbrains.com/ruby/&quot;&gt;RubyMine&lt;/a&gt; which is regarded by many devs as the best Ruby
IDE out there.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wiki.netbeans.org/RubySupport&quot;&gt;NetBeans&lt;/a&gt; - At some point the core JRuby team were employed by
Sun and at that time great Ruby support was added to
NetBeans. Oracle killed the official Ruby support in NetBeans 7.0,
but it’s still maintained as a community project. It’s not as good
as the one in RubyMine, but it doesn’t cost anything either.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.eclipse.org/dltk/&quot;&gt;Eclipse&lt;/a&gt; - Eclipse has an official
Ruby plug-in(part of DLTK), but most people tend to prefer using
&lt;a href=&quot;http://www.aptana.com/products/studio3&quot;&gt;Aptana Studio&lt;/a&gt; - a web
development IDE built on top of Eclipse.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;JRuby is a solid addition to the ranks of JVM languages. Given the
fact that Ruby served as the principle inspiration for Groovy many
people will probably do better to use JRuby in preference to Groovy
(except the ones fond of the Java syntax I guess). I personally love
both Ruby and the JVM and for me JRuby was a match made in heaven. It
opens a lot new and exciting possibilities before one of the most
beautiful languages ever conceived. &lt;/p&gt;

&lt;p&gt;I particularly like the ability to create portable GUIs with Swing and
the extended deployment options that JRuby provides. If Java 7 brings
the promised speed improvements I’m certain that JRuby will have a
shot at becoming the reigning Ruby implementation. &lt;/p&gt;

&lt;p&gt;So what are you waiting for? Go grab a copy of the JRuby Bible
&lt;a href=&quot;http://pragprog.com/titles/jruby/using-jruby&quot;&gt;“Using JRuby”&lt;/a&gt; and
start coding. :-)&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Ruby/Books/2011/05/17/recommended-ruby-books</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Ruby/Books/2011/05/17/recommended-ruby-books.html"/>
    <title>Recommended Ruby books</title>
    <updated>2011-05-17T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;h1 id=&quot;overture&quot;&gt;Overture&lt;/h1&gt;

&lt;p&gt;Back in the day when Ruby wasn’t particularly popular outside Japan
there was only one book in English about Ruby -
&lt;a href=&quot;http://www.amazon.com/Programming-Ruby-1-9-Pragmatic-Programmers/dp/1934356085/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1305641089&amp;amp;sr=1-1&quot;&gt;“Programming Ruby”&lt;/a&gt;, affectionately called the Pickaxe by most
Rubyists. Those day are long gone now. Ruby on Rails propelled Ruby
into the mainstream and quite a few books on Ruby (and Rails) have
been published over the past five or so years. With so many books to
choose from developers often find it hard to pick up the &lt;em&gt;right&lt;/em&gt; book.&lt;/p&gt;

&lt;p&gt;In this post I’ll share with you my thoughts on the Ruby books that I’ve found
to be the most interesting and valuable. Feel free to disagree with
me, after all this is a highly subjective matter.&lt;/p&gt;

&lt;h1 id=&quot;beginner-books&quot;&gt;Beginner books&lt;/h1&gt;

&lt;p&gt;Every saga has a beginning, every journey has a first step, every
programming language has a first book…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://pragprog.com/titles/ltp2/learn-to-program&quot;&gt;Learn to Program&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A book that teaches programming to absolute beginners with Ruby as the
implementation language. I haven’t read this book (only excerpts from
it), but I’ve used it as a gift for several acquaintances of mine, with the
desire to learn to program. All of them were frustrated by other
introductory books they’ve read and all of them praised “Learn to
Program” for its immense clarity, engaging and enjoyable style and
comprehensible examples.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1933988657/ref=s9_simh_gw_p14_d0_i7?pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=center-2&amp;amp;pf_rd_r=0Q48PY008200T745JZSF&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=470938631&amp;amp;pf_rd_i=507846&quot;&gt;The Well Grounded Rubyist&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“The Well Grounded Rubyist” is a thoroughly revised and updated edition
of the older book Ruby for Rails (which was 90% Ruby and 10% Rails). In this new book, author David
A. Black moves beyond Rails and presents a broader view of Ruby. It
covers Ruby 1.9 in great detail, unlike many introductory texts that
tend to offer only superficial coverage of many topics.&lt;/p&gt;

&lt;p&gt;Starting with the basics, The Well-Grounded Rubyist explains Ruby
objects and their interactions from the ground up. In the middle
chapters, the book turns to an examination of Ruby’s built-in, core
classes, showing the reader how to manipulate strings, numbers,
arrays, ranges, hashes, sets, and more. Regular expressions get
attention, as do file and other I/O operations. At 500+ pages it’s a
bit of a hefty tome, but it’s definitely worth reading it.&lt;/p&gt;

&lt;h1 id=&quot;reference-books&quot;&gt;Reference books&lt;/h1&gt;

&lt;p&gt;Reference books are not usually the biggest fun to read, but they tend
to cover everything a language has to offer and we generally keep them
close. Their value increases with the increase of our knowledge of a
particular language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177&quot;&gt;The Ruby Programming Language&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Co-authored by Ruby’s creator Matz this is without a doubt the best
analysis of the languages. Everything you need to know is explained in
a crisp and easy to comprehend manner. The thing I liked most about the
book was the depth in which all the topics were discussed - given the
superficial coverage of some topics (such as encodings) in other books,
this book really stands out. The book is full of examples and
artwork by &lt;em&gt;why the lucky stiff&lt;/em&gt;, and covers both Ruby 1.8 and 1.9. The
chapters on proc &amp;amp; clojures and metaprogramming were particularly
strong. The books is geared mostly towards experienced programmers who
are new to Ruby. If you’re one of them - it’s unlikely you’ll find a
better starting point in your journey to Ruby mastery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Programming-Ruby-1-9-Pragmatic-Programmers/dp/1934356085/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1305636206&amp;amp;sr=1-1&quot;&gt;Programming Ruby&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Co-authored by the Pragmatic Programmers themselves (Dave Thomas &amp;amp;
Andy Hunt) this was the very first English book on Ruby (and arguably
an instrument in Ruby’s international success). The first edition of
the books is freely available on-line, but it’s very outdated so I
wouldn’t recommend you to read it. The book has two parts
- a tutorial part and a reference part. &lt;/p&gt;

&lt;p&gt;The tutorial part is very well written and quite readable. It’s geared
towards less experienced developers and you’ll not find as detailed
coverage of the topics as in “The Ruby Programming Language”. You’ll,
however, find full coverage of everything new in Ruby 1.9 - the book includes all the new and changed syntax and
semantics introduced since Ruby 1.8 and information about the new parameter
passing rules, local variable scoping in blocks, fibers,
multinationalization, and the new block declaration syntax.  &lt;/p&gt;

&lt;p&gt;The reference part of the book includes a description of all the
standard library modules, a complete reference for all built-in classes
and modules (including all the new and changed methods introduced by
Ruby 1.9). &lt;/p&gt;

&lt;p&gt;I’m not sure we need the whole Ruby standard library documentation on
paper anymore in the age of the Internet, but I guess some people will
find it helpful. I just feel that the additional documentation simply
made the book heavier (and possibly pricier).&lt;/p&gt;

&lt;h1 id=&quot;intermediate-ruby-books&quot;&gt;Intermediate Ruby books&lt;/h1&gt;

&lt;p&gt;Once you’ve read a reference or a beginner’s Ruby book you might want
to move to some book that illustrates common Ruby style, techniques
and idioms. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Ruby-Best-Practices-Gregory-Brown/dp/0596523009/ref=sr_1_1?ie=UTF8&amp;amp;qid=1305640369&amp;amp;sr=8-1&quot;&gt;Ruby Best Practices&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;“Ruby Best Practices” is aimed at programmers who want to use Ruby as
experienced Rubyists do. Written by the developer of the Ruby project
Prawn, this concise book explains how to design beautiful APIs and
domain-specific languages with Ruby, as well as how to work with
functional programming ideas and techniques that can simplify your
code and make you more productive. You’ll learn how to write code
that’s readable and expressive.&lt;/p&gt;

&lt;p&gt;The whole book is currently available from free
&lt;a href=&quot;http://blog.rubybestpractices.com/posts/gregory/022-rbp-now-open.html&quot;&gt;on-line&lt;/a&gt;
and has a very nice companion &lt;a href=&quot;http://blog.rubybestpractices.com/&quot;&gt;blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1305640620&amp;amp;sr=1-1&quot;&gt;Eloquent Ruby&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The latest (and one of the greatest) Ruby books I’ve read. The book
pretty much has the same aim as “Ruby Best Practices”, but covers a lot
more ground and is generally a lighter and more enjoyable read. Russ
Olsen has a very particular writing style that turns even the most
boring subjects into interesting discussions. All chapters feature
some real world examples of the concepts introduced, and a discussion
of potential pitfalls.&lt;/p&gt;

&lt;p&gt;Very highly recommended second Ruby book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452/ref=pd_sim_b_6&quot;&gt;Design Patterns in Ruby&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A most enjoyable rendition of a generally boring subject by Russ Olsen. “Design
Patterns in Ruby” explores 14 of the classical GoF design patterns and
compares the canonical implementation of the patterns to idiomatic
Ruby versions of them. Every pattern features a discussion of common
use cases, pitfalls and real world usages.&lt;/p&gt;

&lt;p&gt;The book also builds on top of the original patterns by adding a
couple of new ones like DSL and Convention over configuration.&lt;/p&gt;

&lt;p&gt;Without a doubt one of the best Design pattern books and a must read
for all Ruby hackers. You don’t need any previous knowledge of design
patterns prior to reading this book, but there are a lot of references
to the classic GoF text so you might want to read it beforehand.&lt;/p&gt;

&lt;h1 id=&quot;advanced-ruby-books&quot;&gt;Advanced Ruby books&lt;/h1&gt;

&lt;p&gt;At some point you might want to explore some of the darker corners of Ruby.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Metaprogramming-Ruby-Program-Like-Pros/dp/1934356476/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1305641577&amp;amp;sr=1-1&quot;&gt;Metaprogramming in Ruby&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The ability to modify programs at runtime is one the greatest
strengths of Ruby, but it seems to frighten a lot of people (which is
understandable given the constant usage of fancy words like
eigenclass). If you want to sharpen your Ruby metaprogramming skills -
this is the one true book. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Using-JRuby-Bringing-Ruby-Facets/dp/1934356654/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1305641415&amp;amp;sr=1-1&quot;&gt;Using JRuby: Bringing Ruby to Java&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Believe it or not currently JRuby seems to be best Ruby implementation
around. If you’re interested in using JRuby you’d do well to learn
more about the integration with the JVM that JRuby provides as well as
the various new deployment options that JRuby introduces. &lt;/p&gt;

&lt;p&gt;This book was written by the core JRuby developers and it’s absolutely
excellent. Clear and concise writing style, lots of useful examples.&lt;/p&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;There are certainly other great Ruby books around that I haven’t read,
but I guess that at some point reading books is just not as helpful as
writing real code. I do believe, however, that even experienced
developers can benefit from a good programming book.&lt;/p&gt;

&lt;p&gt;So, which Ruby books that I’ve missed would you recommend?&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Clojure/Java/2011/05/12/jvm-langs-clojure</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Clojure/Java/2011/05/12/jvm-langs-clojure.html"/>
    <title>Java.next() - Clojure: The Return of the Lispers</title>
    <updated>2011-05-12T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;h1 id=&quot;overture&quot;&gt;Overture&lt;/h1&gt;

&lt;p&gt;This is the third part of the series of &lt;strong&gt;Java.next()&lt;/strong&gt;. Last time
we’ve discussed the merits of &lt;a href=&quot;/Java/Scala/2011/05/08/jvm-langs-scala.html&quot;&gt;Scala&lt;/a&gt; - an OO language with a strong
emphasis on functional and parallel programming. Today we’ll be
discussing Clojure - a language that pushes the envelop a lot further
than Scala as far as functional and parallel programming are
concerned. You’ll see that Clojure is radically different from Scala
and Groovy in many aspects - it’s not an OO language, it doesn’t have
Algol-derived syntax and it introduces a few rather radical ideas on
subjects such as &lt;a href=&quot;http://clojure.org/state&quot;&gt;identity and state&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Clojure’s approach to concurrency is characterized by the concept of
identities, which represent a series of immutable states over
time. Since states are immutable values, any number of workers can
operate on them in parallel, and concurrency becomes a question of
managing changes from one state to another. For this purpose, Clojure
provides several mutable reference types, each having well-defined
semantics for the transition between states. This is a pretty complex
topic for a language overview so I’ll discuss it here only cursory.&lt;/p&gt;

&lt;p&gt;Clojure was initially conceived as targeting both the JVM and the
CLR. For various reason currently the core development team is targeting mainly
the JVM and the &lt;a href=&quot;https://github.com/richhickey/clojure-clr&quot;&gt;CLR port&lt;/a&gt;
is receiving less attention (though it’s not abandoned and it’s
regularly being updated). Like Scala it’s not technically correct to
call it a JVM languages, because it’s both a JVM and a .Net language,
but since it’s used a lot more often with Java it doesn’t make that
much of a difference.&lt;/p&gt;

&lt;h1 id=&quot;a-brief-history-of-clojure&quot;&gt;A brief history of Clojure&lt;/h1&gt;

&lt;p&gt;Clojure is a very young project (compared to most popular
programming languages at least). It was created in 2007 by Rich
Hickey (project leader and benevolent dictator for life). He developed
Clojure because he wanted a modern Lisp for functional programming,
symbiotic with the established Java platform, and designed for
concurrency. What started as a hobby project turned into some much
bigger with Rich getting so excited about the project that left his
job to work full-time on the project, effectively through burning his life’s
savings in the process. This was quite the gamble, but it turned out
to be a lucky one, since Clojure’s popularity rapidly spiked and
loyal and energetic community was quickly formed around the project. &lt;/p&gt;

&lt;p&gt;Clojure became the new language of choice for many well respected
hackers from different communities. I’ve noticed something of a trend
in that department - most Clojure hackers used to be Ruby hackers. I
guess some of the Ruby hackers were not satisfied by partial subset of
Lisp features, available in Ruby, and wanted to gain access to all of
Lisp’s power.&lt;/p&gt;

&lt;p&gt;The current Clojure version is 1.2 with 1.3 being just around the
corner.&lt;/p&gt;

&lt;h1 id=&quot;installing-clojure&quot;&gt;Installing Clojure&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Before installing Clojure make sure you have Java installed. Java 5.0
SE will do, but Java 6 SE is highly recommended.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Installing Clojure is just a matter of downloading and extracting a
single archive -
&lt;a href=&quot;http://github.com/downloads/clojure/clojure/clojure-1.2.0.zip&quot;&gt;clojure.zip&lt;/a&gt;. Many
high quality Clojure libraries come prepackaged in another archived
named
&lt;a href=&quot;http://github.com/downloads/clojure/clojure-contrib/clojure-contrib-1.2.0.zip&quot;&gt;Clojure Contrib&lt;/a&gt;. Clojure
Contrib is kind of a staging area for Clojure development - it’s a
common practice to move some of the best parts of contrib into core.&lt;/p&gt;

&lt;p&gt;In the directory in which you expanded clojure.zip, run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; java -cp clojure.jar clojure.main
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will bring up a simple read-eval-print loop (REPL) a.k.a. an
interactive console. Much of
Clojure is defined in Clojure itself (in the &lt;strong&gt;core.clj&lt;/strong&gt; file included in
the src directory of distribution), which is automatically loaded from
the .jar file when Clojure starts. The file &lt;strong&gt;user.clj&lt;/strong&gt;, if found in the
classpath, will be auto-loaded as well. You can leverage this to cause
code to run when Clojure starts. Reading the code in core.clj is a
very good way to get started with language and see how real Clojure
hackers work.&lt;/p&gt;

&lt;p&gt;When core.clj is loaded you will have the language as described herein fully available.
Try:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, Clojure!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Hello,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Clojure!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;javax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;swing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JOptionPane/showMessageDialog&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The REPL has very rudimentary editing. For a better experience, try running it via the &lt;a href=&quot;http://jline.sourceforge.net/&quot;&gt;JLine&lt;/a&gt; ConsoleRunner:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;java -cp jline-0_9_5.jar:clojure.jar jline.ConsoleRunner clojure.main&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will give you left/right arrow key navigation and up/down arrow
command history.&lt;/p&gt;

&lt;p&gt;Later on we’ll see how to setup a real Clojure development environment
in which you’ll be able to leverage the full power of the Clojure REPL
and interactive programming.&lt;/p&gt;

&lt;h1 id=&quot;did-you-say-clojure-was-a-lisp&quot;&gt;Did you say Clojure was a Lisp???&lt;/h1&gt;

&lt;p&gt;Most developers tend to have a very negative attitude towards the word
&lt;strong&gt;Lisp&lt;/strong&gt; in general. I guess it spawns all kinds of nasty associations in
their brains - like prefix syntax notation, tons of parentheses and a
lot of crap they heard about Lisp from their 70 year-old professor,
teaching introduction to functional programming in college, whose
notion of functional programming is that in Lisp everything is a
function (believe me when I tell you this - such professors do exist).&lt;/p&gt;

&lt;p&gt;You know, I wasn’t born coding in Lisp myself. I was initially
exposed to Lisp when I tried to learn the Emacs text editor and I was
baffled by many things - the strange syntax, the talk about atoms and
lists, code as data, macros, continuation, tail-call optimizations,
what to quote and that to evaluate, what is a s-expression and what
isa form. To put it shortly - I was like
Alice down the rabbit whole or like Neo when he found out what the
Matrix is… The world of programming that I was familiar with was
turned upside down.&lt;/p&gt;

&lt;p&gt;The interesting thing is that I felt similarly when I learnt my first
programming language Pascal in the 8th grade. It’s not that Lisp is
any harder than the other programming languages - it’s just that it’s
different and you’re usually approaching it from a position in which
you know one or several programming languages, using the much more
widespread Algol syntax. I advise you to simply keep an open mind while
you read this article and don’t just dismiss Clojure because of its
Lisp heritage.&lt;/p&gt;

&lt;p&gt;You likely know at least one person who constantly keeps telling
you how Lisp is the one true programming language, how everything
pales next to it and how Lisp is the actual answer to that fundamental
question about the life, the universe and everything else (not
42). These people might very well be telling the truth, but their
zealous rants tend to create a negative attitude towards the Lisp
community as well. Please, ignore them.&lt;/p&gt;

&lt;p&gt;Now it’s time to take the red pill… So fasten your seat-belt
Dorothy, ‘cause Kansas is going bye-bye! &lt;/p&gt;

&lt;h1 id=&quot;clojure-at-a-glance&quot;&gt;Clojure at a glance&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Mutable state is the new spaghetti code!&lt;/em&gt; - Rich Hickey, creator of Clojure&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Time is the new memory!&lt;/em&gt; - Rich Hickey&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Clojure feels like a general-purpose language beamed back from the
near future. Its support for functional programming and software
transactional memory is well beyond current practice and is well
suited for multicore hardware. At the same time, Clojure is well
grounded in the past and the present. It brings together Lisp and the
Java Virtual Machine. Lisp brings wisdom spanning most of the history
of programming, and Java brings the robustness, extensive libraries,
and tooling of the dominant platform available today.&lt;/em&gt; - Stuart
Halloway, author of
&lt;a href=&quot;http://www.pragprog.com/titles/shcloj/programming-clojure&quot;&gt;“Programming Clojure”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I had only a few minutes to describe Clojure this would be the gist
of it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dynamic language for the JVM
    &lt;ul&gt;
      &lt;li&gt;Clojure uses dynamic typing like languages such Ruby and Python
and a very smart compiler that will generally generate very
efficient bytecode. If you want to push the performance envelope even
further you can add some explicit type hints in your Clojure
code to ensure the generation of even faster bytecode.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lisp reloaded
    &lt;ul&gt;
      &lt;li&gt;Clojure is Lisp down to its core - it has all the features that
are known and loved, and in the same time it improves upon them in
several ways - for instance we have a literal syntax for most
common collection types. Sure - with Common Lisp’s reader macros
one can do this as well, but nobody bothers to…&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Elegant
    &lt;ul&gt;
      &lt;li&gt;Clojure code tends to be very concise, but very readable non the
less. A core idea in Clojure is to strip the incidental
complexity of problems solving and to be able to just solve the
problems straight away without much ceremony.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Functional
    &lt;ul&gt;
      &lt;li&gt;Clojure puts heavy emphasis on functional programming, but it’s
a practical functional programming language - not a pure one
like Haskell. Clojure acknowledges that some stuff simply change
and operations have to generally produce some effects, and makes
those things easy to model. Clojure has a library full of
rock-solid immutable data structures, relies heavily on lazy
evaluation, tail-recursion and higher-order functions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Designed with concurrency in mind
    &lt;ul&gt;
      &lt;li&gt;Clojure has an extensive built-in high-level facilities to deal
with concurrent access to data and parallel programming in general.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Fast
    &lt;ul&gt;
      &lt;li&gt;Unlike many dynamic languages (even those running on top the
JVM) Clojure is quite fast - it some scenarios it’s performance
can rival that of a statically type language. You can browse a
long list of
&lt;a href=&quot;http://stackoverflow.com/questions/2186709/are-there-any-good-clojure-benchmarks&quot;&gt;benchmark comparisons&lt;/a&gt;
to verify this statement. Given the fact that performance if
often cited as a big drawback of dynamic languages, this is
quite the win for Clojure.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Capable of easily leveraging existing Java code
    &lt;ul&gt;
      &lt;li&gt;Using Java code from Clojure is direct, easy and
idiomatic. There are no intermediate layers or the need to
write wrapper for everything.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll discuss in greater detail some of those features as I moving along.&lt;/p&gt;

&lt;h1 id=&quot;a-whirlwind-tour-of-clojure&quot;&gt;A whirlwind tour of Clojure&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Clojure is elegant&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Removes a lot of accidental complexity&lt;/li&gt;
  &lt;li&gt;Clojure programs are generally expressive and concise&lt;/li&gt;
  &lt;li&gt;Concise programs are naturally easier to understand and maintain&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this Java example from our Scala discussion:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As a reader pointed out using the third party Guava library the code
can be reduced to:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charactersOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Predicate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It still looks quite ugly to me. For the sake of comparison here’s the
Clojure version:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;has-uppercase?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;some &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Character/isUpperCase&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The definition of the problems is “A string has an uppercase character if
some of the characters in it is uppercase” (doesn’t sound good, but
will do). The Clojure code reads more or less like the definition of
the problem. A finer point is that it will work correctly even if you
pass &lt;strong&gt;nil&lt;/strong&gt; to the has-uppercase? function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clojure is concise&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We already saw in the previous example the conciseness of Clojure
code, but here we’ll add another example. This is Java:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In Clojure you’d probably model this class like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;defrecord&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:age&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;user/me&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;:age&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Clojure’s version of the type is a one liner and remain shorter even
with a few examples of its usage. It’s not equivalent to Java
definition, however - the Clojure version of the structure is
immutable.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Clojure is a Lisp&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For better or for worse Clojure is a Lisp dialect and we should accept
this. I have always viewed Lisp as weapon from a more elegant era when
people were more concerned with elements of style and empowering the
developers to easily translate their thoughts into programs. For one
reason or another every Lisp dialect has failed to capture the
attention of a critical mass of developers that may propel it into the
mainstream. This, of course, doesn’t mean that existing Lisp dialects
should be considered a failure. Scheme (the dialect that has probably
had the greatest impact on Clojure’s design) was designed to be as
simple as possible so it could be appropriate as a teaching tool - in
that area Scheme certainly excelled. Common Lisp was created to bring
together the various Lisp dialects under a common denominator and it
also excelled in that endeavour. I guess that its creators hoped that
it would capture a significant market share at some point as well, but alas -
that never happened. &lt;/p&gt;

&lt;p&gt;The syntax and programming model of Lisp so far have been too much for
a typical developer to absorb. Yet, there’s something special about
Lisp that’s worth revisiting, so the new dialects continue to
emerge. Some of the best programming universities start teaching
programming with the Lisp language to form young minds while they are
still open. I have witnessed something of a cycle - every 5 or so
years the interest in Lisp spikes because of something major that
happened in the land of Lisp. In the beginning of the nineties the
work on Common Lisp excited a lot of developers. Five years later Paul
Graham took the stage - he showed the world how Lisp can empower small
teams and make real money (if you haven’t heard of Viaweb fire up
google now). Five years ago Peter Seibel published the
“Practical Common Lisp” book that appeared on Amazon’s bestseller list
and got a lot of new developers excited about Lisp. A now… well I
guess you can figure that one out on your own.&lt;/p&gt;

&lt;p&gt;Lisp just won’t let go and die. There is something magical about
it. And there is this inexplicable smugness on the face of Lisp
developers…&lt;/p&gt;

&lt;p&gt;So let’s review the typical Lisp features that are present in Clojure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lisp-1 dialect
    &lt;ul&gt;
      &lt;li&gt;This means that functions and variables share the same
namespace, unlike in dialects like Common Lisp. Both approaches
have their merits and drawbacks as usual. In Clojure you cannot
have a variable named the say way as a function, but you can
pass function names around without any special syntax. In Common
Lisp you can have function and variables sharing the same name,
but you have to mark functions explicitly when you’re passing
them around (with the #’ reader macro or the &lt;strong&gt;function&lt;/strong&gt; function).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dynamic - both in term of dynamic typing and dynamic
development. Lisp is the language that made popular the technique of
incremental interactive development (we’ll talk about it more in a bit)&lt;/li&gt;
  &lt;li&gt;Code is data
    &lt;ul&gt;
      &lt;li&gt;List code is defined in term of Lisp data structures. When the
reader read the source code of the application it converts it to
standard Lisp objects and they represent the program. No special
transformations, no AST. This is the heart of Lisp macros and a
centrepiece in Lisp philosophy.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reader
    &lt;ul&gt;
      &lt;li&gt;The reader can read valid Clojure forms and translate them into
Clojure objects - object, function call, everything that has a
readable representation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Small core, next to none syntax
    &lt;ul&gt;
      &lt;li&gt;In terms of compact syntax and uniformity of the syntax it has
always been hard to beat Lisp. Most programming languages are
full of special syntax constructs, keywords, etc. In lisp
programs are just lists and the low-level plumbing comes in the
form of special functions called special forms. Everything else
is implemented in terms of those special forms. &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sequences
    &lt;ul&gt;
      &lt;li&gt;Clojure abstracts common collection traits into an abstraction
called seq which allows you to use a similar API for many tasks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Macros
    &lt;ul&gt;
      &lt;li&gt;Forget about C macros, Word macros, editor macros. Lisp macros
are the most powerful metaprogramming technique out there - they
enable you generate new syntax abstractions unlike anything
else. If you need a new operator in Java you’d have a hard time
convincing the guys in Oracle to add it for you. With Lisp
you’re in charge and you can define any syntax abstractions that
you wish. As an appetiser consider the &lt;strong&gt;and&lt;/strong&gt; boolean
statement. In most languages it’s built into the language
itself. In Clojure it’s just a short macro:&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defmacro &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&amp;quot;Evaluates exprs one at a time, from left to right. If a form&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  returns logical false (nil or false), and returns that value and&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  doesn&amp;#39;t evaluate any of the other expressions, otherwise it returns&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  the value of the last expr. (and) returns true.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:added&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;([]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;~x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;~@next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I hope this example gives you an idea about the power that Clojure
offers you - you can be more than just a programmer; you can be the
language designer.&lt;/p&gt;

&lt;h1 id=&quot;persistent-data-structures&quot;&gt;Persistent data structures&lt;/h1&gt;

&lt;p&gt;Data structures in Clojure are immutable. Operations executed on them
return a new data structure of the same type instead of modifying the
structure in place. Understandably most people are immediately
concerned about the performance implications of such a technique -
this seems like quite a lot of overhead. They needn’t worry, though.&lt;/p&gt;

&lt;p&gt;Data structures in Clojure happen to be persistent as well. A persistent data
structure is a data structure which always preserves the previous
version of itself when it is modified -  such data structures are
effectively immutable, as their operations do not (visibly) update the
structure in-place, but instead always yield a new updated
structure. A persistent data structure is not a data structure
committed to persistent storage, such as a disk; this is a different
and unrelated sense of the word “persistent”.&lt;/p&gt;

&lt;p&gt;Persistent data structures save a lot of copying around and improve
greatly the performance. Knowing this should be enough for most
developers, those that are more curious can find a lot of interesting
articles on the subject on-line.&lt;/p&gt;

&lt;p&gt;The core data structures in Clojure are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List&lt;/li&gt;
  &lt;li&gt;Set - all the items in it are unique&lt;/li&gt;
  &lt;li&gt;Map - also known as associative array and dictionary in other languages&lt;/li&gt;
  &lt;li&gt;Vector - also know as one dimensional array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s see them in action:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;;; Lists&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; list creation&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;list &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; quoted list creation&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;user/a-list&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; find the size of a list&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;first &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rest &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;last &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; find the elements of the list matching a predicate(boolean function)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;odd?&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; map an anonymous(lambda) function to all elements of the list&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; add an element to the beginning of the list&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cons &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; cons in a list specific function, conj is a general purpose one and&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; works on all collection (but in a different manner)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; retrieve the first five items in a list&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; retrieve all but the first five items in a list&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;drop &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take-while &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;drop-while &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;drop-while &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;;; Sets&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;user/a-set&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;disj &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-set&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; most set functions live in the clojure.set namespace&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;clojure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;difference &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;intersection &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;union &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;;; Maps&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;hash-map &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:Bozhidar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Batsov&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bruce&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Wayne&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Selina&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Kyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:Selina&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Kyle,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bozhidar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Batsov,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bruce&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Wayne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:Bozhidar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Batsov,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bruce&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Wayne,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Selina&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Kyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;user/a-map&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:Bozhidar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Batsov,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bruce&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Wayne,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Selina&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Kyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;get &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bozhidar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;:Batsov&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bozhidar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Clark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;:Bozhidar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;:Batsov&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;assoc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Lois&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Lane&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:Lois&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Lane,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bozhidar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Batsov,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bruce&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Wayne,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Selina&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Kyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;keys &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;:Bozhidar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bruce&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Selina&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;vals &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;:Batsov&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Wayne&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Kyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dissoc &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bruce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:Bozhidar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Batsov,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Selina&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Kyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;merge &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:Alia&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Atreides,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Arya&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Stark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:Arya&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Stark,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Alia&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Atreides,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bozhidar&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Batsov,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Bruce&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Wayne,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Selina&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;:Kyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;;;; Vectors&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;vector &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-vector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;user/a-vector&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-vector&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; random access is a constant time operation in vectors&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;nth &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-vector&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pop &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;peek &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a-vector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Most data structures in Clojure are part of a common Sequence API,
that we’ll briefly discuss shortly.&lt;/p&gt;

&lt;h1 id=&quot;the-seq-api&quot;&gt;The Seq API&lt;/h1&gt;

&lt;p&gt;Clojure defines many algorithms in terms of sequences (seqs). A seq is
a logical list, and unlike most Lisps where the list is represented by
a concrete, 2-slot structure, Clojure uses the ISeq interface to allow
many data structures to provide access to their elements as
sequences. The &lt;strong&gt;seq&lt;/strong&gt; function yields an implementation of ISeq
appropriate to the collection. Seqs differ from iterators in that they
are persistent and immutable, not stateful cursors into a
collection. As such, they are useful for much more than foreach -
functions can consume and produce seqs, they are thread safe, they can
share structure, etc.&lt;/p&gt;

&lt;p&gt;Most of the sequence library functions are lazy, i.e. functions that
return seqs do so incrementally, as they are consumed, and thus
consume any seq arguments incrementally as well. Functions returning
lazy seqs can be implemented using the &lt;strong&gt;lazy-seq&lt;/strong&gt; macro. The laziness
allows us to deal with infinite data structures easily (as long as we
don’t try to act on all of their elements that is):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;even?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;iterate &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;iterate&lt;/strong&gt; returns an infinite lazy sequence. &lt;strong&gt;filter&lt;/strong&gt; returns a lazy
sequence as well. With &lt;strong&gt;take&lt;/strong&gt; we can take only the elements we need
without have to process the entire infinite collection.&lt;/p&gt;

&lt;h1 id=&quot;functional-programing-with-clojure&quot;&gt;Functional programing with Clojure&lt;/h1&gt;

&lt;p&gt;Clojure is a functional programming language and as such it offers quite
the selection of features that make it easy to leverage the functional
programming techniques. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;functions are objects&lt;/li&gt;
  &lt;li&gt;all built-in data structures are immutable&lt;/li&gt;
  &lt;li&gt;most functions in the core library are pure (they don’t produce any
side results and they don’t interact with the outside world in any
manner other than just receiving their parameters from it)&lt;/li&gt;
  &lt;li&gt;there are no iteration constructs like &lt;strong&gt;for&lt;/strong&gt; and &lt;strong&gt;while&lt;/strong&gt; in
other languages. In place of iteration list comprehensions and
recursion are commonly used.&lt;/li&gt;
  &lt;li&gt;everything is an expression that yields some result - even things
that are traditionally statements in other languages such as &lt;strong&gt;if&lt;/strong&gt; and
&lt;strong&gt;print&lt;/strong&gt; (although the return value of print is not particularly useful)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;parallel-programming&quot;&gt;Parallel programming&lt;/h1&gt;

&lt;p&gt;Functional programming and parallel programming complement each
other. When most of your code is contained in pure functions it’s
naturally tread safe (not to mention much easier to test). Since you
don’t have any mutable state there, it’s absolutely safe to fire those
pure functions in as many threads as you wish and you’ll have
absolutely nothing to worry about.&lt;/p&gt;

&lt;p&gt;Programs, however, eventually produce side effects and often they
really have to have some mutable state. Clojure makes it easy to model
such situations in your programs in a way that doesn’t compromise the
ability to parallelize the programs. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Refs and transactions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Transactional references (known as refs in Clojure) ensure safe shared use of mutable
storage locations via a software transactional memory (STM)
system. Refs are bound to a single storage location for their
lifetime, and only allow mutation of that location to occur within a
transaction.&lt;/p&gt;

&lt;p&gt;Clojure transactions should be easy to understand if you’ve ever used
database transactions - they ensure that all actions on refs are
atomic, consistent, and isolated. Atomic means that every change to
refs made within a transaction occurs or none do. Consistent means
that each new value can be checked with a validator function before
allowing the transaction to commit. Isolated means that no transaction
sees the effects of any other transaction while it is running. Another
feature common to STMs is that, should a transaction have a conflict
while running, it is automatically retried.&lt;/p&gt;

&lt;p&gt;There are many ways to do STMs (locking/pessimistic,
lock-free/optimistic and hybrids) and it is still a research
problem. The Clojure STM uses multiversion concurrency control with
adaptive history queues for snapshot isolation, and provides a
distinct commute operation. Here’s a short example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;picked-numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ref &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;secret-num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nextInt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guess-number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Enter a guess between 1 and 10: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Integer/parseInt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cond&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You guessed correctly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains? &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;deref &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;picked-numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Pick another number! You already tried that one.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;:else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dosync&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alter &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;picked-numbers&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;conj&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guess-number&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;secret-num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guess-number&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;secret-num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guess-number&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;secret-num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;nv&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I hope you got the basic idea from this simple, but mostly useless
snippet. Generally when we have only one object that we’ll be changing
in this manner an atom is a more appropriate choice as we’ll see shortly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Agents&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Like &lt;em&gt;refs&lt;/em&gt;, &lt;em&gt;agents&lt;/em&gt; provide shared access to mutable state. Where refs
support coordinated, synchronous change of multiple locations, agents
provide independent, asynchronous change of individual
locations (to put it into simpler term you’d use refs if you had to
updated several things and wait for the update to happen and agents if
you need to update only one thing and don’t really care when the
update will happen - only that it will happen). Agents are bound to a single storage location for their
lifetime, and only allow mutation of that location (to a new state) to
occur as a result of an action. Actions are functions (with,
optionally, additional arguments) that are asynchronously applied to
an agent’s state and whose return value becomes the agent’s new
state. Let’s see an agent (Smith maybe?) in action:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;some-agent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;agent &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;&amp;#39;user/some-agent&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dotimes &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;send &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;some-agent&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;inc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;some-agent&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;lt;Agent@15c024c:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@some-agent&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Atoms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Atoms provide a way to manage shared, synchronous, independent
state. They are a reference type like refs and vars. You create an
atom with atom, and can access its state with deref (or @). Let’s
rework the refs example to use an atom:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;picked-numbers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;atom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;secret-num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;nextInt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guess-number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;print &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Enter a guess between 1 and 10: &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Integer/parseInt&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
             &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cond&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;= &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;You guessed correctly&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;contains? &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;deref &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;picked-numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;println &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Pick another number! You already tried that one.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
               &lt;span class=&quot;nv&quot;&gt;:else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;swap!&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;picked-numbers&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;conj&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guess-number&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;secret-num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guess-number&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;secret-num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;guess-number&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;secret-num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;nv&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;between&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Vars&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Bindings created with the &lt;strong&gt;binding&lt;/strong&gt; macro cannot be seen by any other
thread. Bindings created with binding can be assigned to, which
provides a means for a nested context to communicate with code before
it on the call stack.&lt;/p&gt;

&lt;p&gt;I’ll not be discussing them further, because Vars are a vast subject
deserving its own post.&lt;/p&gt;

&lt;h1 id=&quot;oop-lisp-style&quot;&gt;OOP, Lisp style&lt;/h1&gt;

&lt;p&gt;Object oriented programming in most programming languages is based on
a single dispatch message passing. The object on which we invoke a
method (poor choice of words, but easier to comprehend) is the
receiver, the method name and it’s arguments are the message. The
method’s invoked solely on the base of the type of the receiver
object.&lt;/p&gt;

&lt;p&gt;Lisps have traditionally implemented OOP with generic methods, that
don’t have a receiver and are dispatched on the basis of the types of
all of their arguments. In the world of multiple dispatch the more
traditional single dispatch is just a special case in which only the
type of the first method argument matters. Here’s a taste of
multimethods in Clojure:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defmulti &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;string? &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defmethod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defmethod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-add&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my-add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; =&amp;gt; 7&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;my-add&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;3&amp;quot;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; =&amp;gt; &amp;quot;34&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we defined a multi-method that behaves differently for string and
numeric arguments - strings args are concatenated and numeric args are
added together.&lt;/p&gt;

&lt;h1 id=&quot;interactive-development&quot;&gt;Interactive development&lt;/h1&gt;

&lt;p&gt;Traditional programming languages have more or less the following work
flow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;write the unit tests (power to TDD)&lt;/li&gt;
  &lt;li&gt;write the source file&lt;/li&gt;
  &lt;li&gt;compile the source file (if needed)&lt;/li&gt;
  &lt;li&gt;run the source file with an interpreter or run the binary file that
resulted from the compilation step&lt;/li&gt;
  &lt;li&gt;if you need to modify something you edit the code and repeat the
other steps&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those programs naturally have some entry points. Alternative you can
simple use the test suite you’ve initially developed.&lt;/p&gt;

&lt;p&gt;A Lisp developers generally has a very different work flow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start a REPL&lt;/li&gt;
  &lt;li&gt;write some unit tests&lt;/li&gt;
  &lt;li&gt;write a few functions definitions in a source file&lt;/li&gt;
  &lt;li&gt;compile them interactively and load them in a REPL&lt;/li&gt;
  &lt;li&gt;test these functions directly from the REPL&lt;/li&gt;
  &lt;li&gt;if you need to modify a function - just edit it and reload in the
REPL&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve been a C/C++ and Java developer for a long time and I didn’t see
anything wrong with first model. In fact - I had been practising it
for so very long that it felt quite natural to me. After I’ve started
hacking with Lisp, however, my old work flow started to feel very
unproductive to me (especially with statically typed languages). Here
are some key aspects of the interactive (and iterative) development
that is so common in Lisp (not only in Common Lisp ;-) ):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The REPL is an integral process of the coding process. Ruby and
Python developers generally tend to use it only for exploratory
programming although many of the techniques common for Lisp could be
applied for Ruby and Python as well. &lt;/li&gt;
  &lt;li&gt;Functions can be defined (and redefined) in real time&lt;/li&gt;
  &lt;li&gt;Loading &amp;amp; compilation of code at runtime&lt;/li&gt;
  &lt;li&gt;Powerful introspection features&lt;/li&gt;
  &lt;li&gt;Interactive development&lt;/li&gt;
  &lt;li&gt;Iterative development - you know the old saying “Lather, rinse,
repeat…” (probably one of the oldest examples of recursion).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;the-tools-of-the-trade&quot;&gt;The tools of the trade&lt;/h1&gt;

&lt;p&gt;The single biggest problem with Clojure in the moment (at least in my
opinion) has nothing to do with the language itself. The problem is
the lack of decent tooling and infrastructure around it. Lisp hackers
have traditionally favoured the SLIME development environment for
Emacs. Unfortunately the maintainers are not especially interested in
having Clojure support (since SLIME targets Common Lisp) and nobody in
Clojure community seems to be capable of writing an adequate swank
component for Clojure that can be used with an up-to-date version of
SLIME. The existing one is quite rudimentary and doesn’t work with
stock SLIME distributions. But this is not the worst part - the worst
part is that even this crippled SLIME is still the best development
tool for Clojure. IntelliJ’s plug-in is almost unusable, Eclipse’s is
barely usable and NetBeans’s cannot be installed half the time…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IDEs
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://plugins.intellij.net/plugin/?id=4050&quot;&gt;IntelliJ IDEA&lt;/a&gt; -
everyone knows how much I love IntelliJ IDEA. Sadly I cannot say
a good word about the La Clojure plug-in. Its mostly unmaintained
(and often broken), has pretty limited features and is generally
good for… nothing. It’s sad to see it’s so far back in
JetBrains’s priority list - they are doing wonderful things in
their Groovy and Scala plugins. &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/counterclockwise/&quot;&gt;Eclipse&lt;/a&gt; - Eclipse
certainly boasts the best IDE Clojure plug-in at the moment (Counter
clock-wise). It has a lot of features found otherwise only in
SLIME. It even features partial paredit support. Being the best
in such a sorry bunch is not quite an achievement, but at least
the guys there are trying really hard and I’m sure that within one
or two releases they’ll have a great product. &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.enclojure.org/&quot;&gt;NetBeans&lt;/a&gt; - The Enclojure plug-in
seems to be abandoned currently. It has no released a new version
in over an year and the old one were buggy as hell (when they the
decency to get themselves installed, that is).&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/technomancy/swank-clojure&quot;&gt;SLIME&lt;/a&gt; - The Ultimate Clojure programming environment. Even though
it’s lacking a few features of the Common Lisp counterpart, SLIME
still is the best option for Clojure development, uniquely
attuned to the Lisp philosophy of interactive and incremental development.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Luckily there’s no lack of good build tools that one can use with Clojure.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build tools
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://maven.Apache.org&quot;&gt;Apache Maven&lt;/a&gt; - Maven has a nice
Clojure plugin&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/technomancy/leiningen&quot;&gt;Leiningen&lt;/a&gt; - probably
the most popular Clojure-specific build tool&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/ninjudd/cake&quot;&gt;Cake&lt;/a&gt; - a solid alternative to Leiningen&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.gradle.org/&quot;&gt;Gradle&lt;/a&gt; - a build system for Java-based
applications, written in Groovy, that supports Clojure&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://buildr.apache.org/&quot;&gt;Apache Builder&lt;/a&gt; - a build system for
Java-based applications, written in Ruby , that supports Clojure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Books
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://pragprog.com/titles/shcloj/programming-clojure&quot;&gt;“Programming Clojure”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.apress.com/9781430272311&quot;&gt;“Practical Clojure”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://joyofclojure.com/&quot;&gt;“The Joy of Clojure”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Screencasts &amp;amp; Video lectures
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://clojure.blip.tv/&quot;&gt;“Clojure’s channel”&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Websites &amp;amp; Blogs
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://blog.fogus.me/&quot;&gt;Official website&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://disclojure.org/&quot;&gt;Disclojure&lt;/a&gt; - a clojure news aggregator&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Exercises
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;/Misc/Common%20Lisp/2011/05/04/lisp-problems.html&quot;&gt;Lisp problems&lt;/a&gt; - a work in progress, I’ll add Clojure
solutions next to the Common Lisp ones when I have some thime&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://foognostic.net/labrepl-summary/&quot;&gt;Labrepl&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://projecteuler.net/&quot;&gt;Project Euler&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/functional-koans/clojure-koans&quot;&gt;Clojure Koans&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;Clojure is a radical departure from both traditional Algol-derived
languages and existing Lisp dialects. Its advanced support for
functional programming, combined with a state of the art concurrency
support make it attractive language for the development of heavy duty
enterprise grade systems. Coupled with the seamless Java integration
the sky seems to be the limit for Clojure…&lt;/p&gt;

&lt;p&gt;Unfortunately Clojure has to face several problems if it’s to
succeed. First of all it has to attract a critical mass of developers
that are not afraid of the syntactic difference with common
languages. Then there is the concept of functional thinking - a way of
thinking quite foreign to most developers. To be able to properly
leverage the full power of Clojure developers have to be ready to
overcome a steep learning curve, but rest assured, the prize at the
end of the journey is well worth it.&lt;/p&gt;

&lt;p&gt;Another gripe with Clojure at this point is the lack of decent
tooling. Sure, we have the &lt;em&gt;supported&lt;/em&gt; SLIME, available in ELPA, but
even Emacs users are not particularly happy with it. And let’s face
reality - it’s quite unlikely that many developers will be willing to
give up the comfort of their beloved IDEs just to be able to code in
Clojure. Eclipse, IntelliJ &amp;amp; NetBeans are unfortunately nowhere near
providing a good Clojure experience. Hopefully, this will change
soon…&lt;/p&gt;

&lt;p&gt;I’m a very big fan of Lisp in general, that is no secret. I’ve tried
to be as objective as possible and abstained myself from over
extolling some of Clojure’s virtues. I’d like to say, however, that
I’m very excited that we finally have a Lisp dialect that is modern,
simple, powerful, elegant and most of all - capable of getting the job
done. I really hope that Clojure will be instrument of Lisp return on
the centre stage of programming, where it deserves to be.&lt;/p&gt;

&lt;p&gt;As usual the article is very shallow overview and doesn’t even
mention some important features of the language. Be sure to check out
some of the resources mentioned.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. This is the last of the articles that I’d originally intended to
write. I’m considering the possibility to write a couple of more
chapter of the Java.next() series if people are interested to read
them. JRuby will probably make an appearance, but I’d like to hear
some reader input as well. So, what JVM language do you think is
worthy enough to make an appearance in the Java.next() series?&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Emacs/2011/05/11/zenburn-emacs</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Emacs/2011/05/11/zenburn-emacs.html"/>
    <title>A new Zenburn theme for Emacs</title>
    <updated>2011-05-11T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://slinky.imukuppi.org/zenburnpage/&quot;&gt;Zenburn&lt;/a&gt; is a popular colour theme for
vim, developed by Jani Nurminen. It’s my personal
belief (and probably that of many of its users I presume) that it’s one of the
best low contrast themes out there and that Zenburn is exceptionally
easy on the eyes. Btw, I love Zenburn so much that I’ve even created a
&lt;a href=&quot;https://github.com/bbatsov/blog/blob/master/css/syntax.css&quot;&gt;Zenburn theme for Jekyll&lt;/a&gt; to be able to use for my blog.&lt;/p&gt;

&lt;p&gt;The project was originally
&lt;a href=&quot;https://github.com/dbrock/zenburn-el&quot;&gt;ported to Emacs&lt;/a&gt; by Daniel
Brockman, but it seems that he has lost interest in it recently - very
few updates has been published by him in the past few years. This is
the reason why I gathered all improvements that I could find laying
around the Internet and applied them to the last official Zenburn
version, effectively starting
a &lt;a href=&quot;https://github.com/bbatsov/zenburn-emacs/blob/master/zenburn-legacy.el&quot;&gt;fork of the project&lt;/a&gt;. So far, so good…&lt;/p&gt;

&lt;p&gt;Daniel’s version of Zenburn, however, had reached a state in which it took me
too much to make improvements to it - since a lot of users had direct access
to modify it everything in it was in complete disarray - it’s full of
uses of colours that were not defined by the original zenburn,
questionable coding practices and inconsistent theming of
faces. Yesterday I decided to take a closer look at the code of the
theme and clean it up a little - 20 minutes later I was writing &lt;a href=&quot;https://github.com/bbatsov/zenburn-emacs/blob/master/zenburn.el&quot;&gt;a new
zenburn theme from scratch&lt;/a&gt;. I decided that making everything from
the start will probably be less effort anyways. &lt;/p&gt;

&lt;p&gt;I’ve added enough faces in the new theme to make it usable for most
users and I’ll (hopefully) continue to improve the theme and expand
the supported modes constantly. If you’re interested - give it a try!
If you’re unhappy with something - create an issue in GitHub (or even
better send me a pull request with your suggested improvements).&lt;/p&gt;

&lt;p&gt;It’s my desire to make the new &lt;a href=&quot;https://github.com/bbatsov/zenburn-emacs&quot;&gt;Zenburn for Emacs&lt;/a&gt; just as good as the original.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/Scala/2011/05/08/jvm-langs-scala</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/Scala/2011/05/08/jvm-langs-scala.html"/>
    <title>Java.next() - Scala: The Revenge of the Static Typing</title>
    <updated>2011-05-08T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;h1 id=&quot;overture&quot;&gt;Overture&lt;/h1&gt;

&lt;p&gt;This is the second post from my series dedicated to modern programming
languages for the Java platform. Last time we’ve discussed the
&lt;a href=&quot;/Java/Groovy/2011/05/06/jvm-langs-groovy.html&quot;&gt;Groovy programming language&lt;/a&gt;, which
is a member of the ever expanding family of dynamic programming
languages. The Scala programming language, that is the object of
today’s discussion, is different beast entirely - not only it uses static
typing(like Java &amp;amp; C# amongst others), but it also puts a heavy emphasis on the type
system, functional and parallel programming.&lt;/p&gt;

&lt;p&gt;In theory Scala runs both on the JVM and on the CLR(the .NET VM). The
Java port, however, receives a lot more attention by Scala’s developers
and it probably accounts for close of to all of Scala’s
deployments(especially in production).&lt;/p&gt;

&lt;p&gt;This article is extremely hard to write for me. Unlike Groovy, I’m
deeply familiar with the language and would like to share quite a lot
with you. For obvious reasons I cannot go into much detail (otherwise
I’d have written an on-line book). You’re encourage to follow up this
article by reading some of the excellent resources, mentioned near its end.&lt;/p&gt;

&lt;h1 id=&quot;a-brief-history-of-scala&quot;&gt;A brief history of Scala&lt;/h1&gt;

&lt;p&gt;After having written hundreds of thousands lines of Java himself,
Martin Odersky, Professor at EPFL, was well aware of the frustrations
faced by Java programmers. He formed the vision of applying the best
knowledge of the academic research community to the problem of making
the Java programming experience better, even fun. His first pragmatic
step was Java Generics, seen as a major success by the Java
community (though we should mention that it was C# that first brought
generic programming to the masses). But for the full vision of scalable concurrent programming
to be achieved he saw that the basic Java syntax would need to
change. You simply couldn’t get there from here. But a deceptively
simple shift in syntax gained better uniformity to the object-oriented
aspects of Java, and this in turn enabled a natural fusion with
functional programming concepts which are critical for tackling
concurrency. In 2001 Scala was born. The first official version was
released in late 2003. This year it celebrates its first
anniversary in a way (depending on what do you consider the birthday).&lt;/p&gt;

&lt;p&gt;Scala stands for a SCAlable LAnguage. What does this mean? Scala is
designed to tackle solutions of wildly varying sizes - from small
scripts (programming in the small) to massive distributed enterprise
applications (generally programming in the large). Scala also means
&lt;em&gt;steps&lt;/em&gt; in Italian and this is the reason why most Scala books have
some form of steps on their covers (arguably this is the reason why
Scala is very popular in Italy and particularly in Milan). &lt;/p&gt;

&lt;p&gt;The current production version of Scala is 2.8.1 with 2.9.0 being in
the release candidate stages.&lt;/p&gt;

&lt;h1 id=&quot;installing-scala&quot;&gt;Installing Scala&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Universal installer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Scala has an &lt;a href=&quot;http://www.scala-lang.org/downloads/distrib/files/scala-2.8.1.final-installer.jar&quot;&gt;universal installer&lt;/a&gt; that could be ran on every platform
with Java installed. You can run it from the console like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; java -jar scala-2.8.1.final-installer.jar
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Alternatively, on most systems simply double clicking the installer
jar will run it(assuming you have a GUI environment and assuming that
the java command is associated with jar files - something that is
usually so by default).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing from binary archive&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just download the Scala distribution for &lt;a href=&quot;http://www.scala-lang.org/downloads/distrib/files/scala-2.8.1.final.tgz&quot;&gt;Unix, OS X and Cygwin&lt;/a&gt; or
the one for
&lt;a href=&quot;http://www.scala-lang.org/downloads/distrib/files/scala-2.8.1.final.zip&quot;&gt;Windows&lt;/a&gt;
and extract it somewhere. I’m a GNU/Linux user and I tend to extract
all third party apps in the /opt folder:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo tar xf scala-2.8.1.final.tgz -C /opt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You’d also want to add the folder containing the Scala binaries
(compiler, REPL, etc) to your PATH environmental variable. Unix users
might add something like this to their shell startup script (like
.bashrc):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/java/latest
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCALA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/scala-2.8.1
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$SCALA_HOME&lt;/span&gt;/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should now have Scala installed properly. You can test this by
typing the following in a command shell:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; scala
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which should create an interactive Scala shell where you can type
Scala expressions. &lt;/p&gt;

&lt;p&gt;To run a specific Scala script type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; scala SomeScript.scala
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Linux installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most Linux distributions provide Scala through their integrated
package management system. On Debian(and derivatives like Ubuntu) you
can install it like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo apt-get install scala
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On Red Hat systems the magic incantation looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo yum install scala
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Personally I’d prefer the platform-independent installation method,
since some distribution package Scala in a non-standard manner, which
confuses IDEs for instance.&lt;/p&gt;

&lt;h1 id=&quot;scala-at-a-glance&quot;&gt;Scala at a glance&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;If I were to pick a language to use today other than Java, it would
be Scala…&lt;/em&gt; - James Gosling, creator of Java&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If Java programmers want to use features that aren’t present in the
language, I think they’re probably best off using another language
that targets the JVM, such a Scala and Groovy.&lt;/em&gt; - Joshua Bloch, author
of “Effective Java” and many of Java’s core libraries&lt;/p&gt;

&lt;p&gt;Scala basically is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SCAlable LAnguage&lt;/li&gt;
  &lt;li&gt;Pure OO language&lt;/li&gt;
  &lt;li&gt;Functional language&lt;/li&gt;
  &lt;li&gt;Statically typed language&lt;/li&gt;
  &lt;li&gt;A language that integrates seamlessly with existing Java code&lt;/li&gt;
  &lt;li&gt;A great community&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scala’s more prominent features are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Type inference&lt;/li&gt;
  &lt;li&gt;Advanced type system&lt;/li&gt;
  &lt;li&gt;Improved OO model&lt;/li&gt;
  &lt;li&gt;Improved imports system&lt;/li&gt;
  &lt;li&gt;Simplified visibility rules&lt;/li&gt;
  &lt;li&gt;Suitable for scripting, GUI, enterprise&lt;/li&gt;
  &lt;li&gt;Relies on immutable data structures by default&lt;/li&gt;
  &lt;li&gt;Great support for building parallel applications&lt;/li&gt;
  &lt;li&gt;Pimps (improves) a lot of standard Java classes using a technique
called &lt;a href=&quot;http://www.codecommit.com/blog/ruby/implicit-conversions-more-powerful-than-dynamic-typing&quot;&gt;implicit conversion&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;static-vs-dynamic-typing&quot;&gt;Static vs Dynamic typing&lt;/h1&gt;

&lt;p&gt;This is one of the oldest debates in computing and everyone with a
little bit of common sense knows that there is no definitive answer to this
so fundamental question. Both approaches have merits and drawbacks. In
recent years we saw a rapid explosion in the rate of growth of
dynamic languages which lead many people to believe that static typing
is something of the past and is headed down on the road to oblivion. I ,
however, very much doubt such a possibility. So, without further ado
here’s my take on their pros and cons:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dynamic typing&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros
    &lt;ul&gt;
      &lt;li&gt;Less verbose &lt;/li&gt;
      &lt;li&gt;Better metaprogramming capabilities - it’s very easy in a
language like to Ruby to modify a class at runtime for
instance. Java developers, on the other side, can only dream for
such things…&lt;/li&gt;
      &lt;li&gt;Duck typing allows to reduce immensely the coupling between your
classes&lt;/li&gt;
      &lt;li&gt;Reduced development and deployment cycles - most dynamic
languages are implemented as interpreters and this way you’re
spared the tedious compilation/redeployment cycles&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cons
    &lt;ul&gt;
      &lt;li&gt;Some might argue that type declarations serve as an additional
documentation and their lack (arguably) make the code harder to
read. Of course, when you’re following a decent naming
convention (and by that I mean that you’re using sensible
identifiers) that hardly matters.&lt;/li&gt;
      &lt;li&gt;Slower performance - knowing all the types in advance,
naturally, allows the compilers to generate faster code for
static languages than for dynamic ones. Some Lisp compilers,
however, offer performance that rivals that of statically typed
programs, so it’s reasonable to expect that the situation in
this department will improve over time.&lt;/li&gt;
      &lt;li&gt;It’s hard to create IDEs for dynamic languages that offer the
same level of assistance as those for static languages. The
problem stems from the simple fact that in a dynamic language
the type of an object is known only at runtime and an IDE will have
a pretty hard type guessing the types because of this fact. In
my humble opinion the lack of all the fancy IDE features like
reliable code completion and refactorings is one of the central
reasons why statically type languages like Java, C# and C++ are
still enjoying higher popularity than dynamic languages.&lt;/li&gt;
      &lt;li&gt;You need to write more unit tests, because many of the simple
errors that the compiler of statically typed language will detect
will manifest themselves only at runtime.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Static typing&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros
    &lt;ul&gt;
      &lt;li&gt;Mighty development environments, capable of compensating for a
lot of the languages deficiencies. You always get correct
completion suggestions (in a decent IDE that is), all type errors
are caught as you type (except the runtime errors that is). &lt;/li&gt;
      &lt;li&gt;Reliable refactoring - you make some changes, you recompile the
project, you instantly see whether everything is OK after the
refactoring. One of the key reasons why enterprise projects are
often implemented in Java and C#.&lt;/li&gt;
      &lt;li&gt;Maximum performance - when you know all the types in advance it’s
not particularly hard to generate the most efficient in terms of
performance bytecode/binary
code.&lt;/li&gt;
      &lt;li&gt;You don’t need to write unit tests for errors that will be caught
by compiler.&lt;/li&gt;
      &lt;li&gt;The type declarations arguably serve as an up-to-date
documentation on which you can always rely.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cons
    &lt;ul&gt;
      &lt;li&gt;Poor metaprogramming support - statically typed system limit very
much the magic you can do in you programs. Metaprogramming is
actually considered a black art in many statically type
languages. In a functional statically typed language higher-order
functions can compensate a lot in that department. Scala happens
to be one such language, Haskell - another.&lt;/li&gt;
      &lt;li&gt;Generally statically type languages are a bit more verbose -
mostly because the code is full of type annotations (languages
like Scala and Haskell, however, have found the cure for this
ailment - &lt;a href=&quot;http://www.codecommit.com/blog/scala/what-is-hindley-milner-and-why-is-it-cool&quot;&gt;type inference&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;No support (in most statically typed languages) for duck typing
causes you to often link classes in hierarchies that you’d rather
avoid if you had the chance to. I should point out that languages
supporting structural types are not suffering from these
problems. Scala happens to support them from version 2.6.0.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;a-whirlwind-tour-of-scala&quot;&gt;A whirlwind tour of Scala&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Scala is expressive&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;romanToArabic&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;II&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;III&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;IV&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;V&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;romanToArabic&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;scala.collection.immutable.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;II&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;III&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;romanToArabic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;I&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;romanToArabic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;II&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Scala removes the incidental complexity and cut right to the core of
the problem. Imagine that you want to find whether or not a string
contains uppercase characters. In Java you’d write something like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Character&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So much boilerplate code (loop, if) to express such a basic idea. In
Scala you’d simply write:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasUppercase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; 
    &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// or more compactly &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasUppercase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Scala’s code actually reads a lot like English language that makes
sense to humans - check if in &lt;em&gt;word&lt;/em&gt;
there exists an uppercase character. Notice that is Scala &lt;em&gt;if&lt;/em&gt; is an
expression yielding a return value, unlike in many other languages.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scala is concise&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider this simple JavaBean (well, not exactly JavaBean to be
precise - it lacks a no param constructor) definition:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setAge&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In Scala the equivalent definition looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is what I call a good signal-to-noise ratio.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Scala is pure OO language - everything is an object, operators are
actually methods, everything yields some result(even constructs such
as if), there are no static field and methods &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scala is power overwhelming&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to implement a thread-safe mathematical service in Scala? No problem!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.actors.Actor._&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mathService&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mathService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!?&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns 4&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mathService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!?&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Case classes are out of the scope of this post, but I guess you get
the basic idea.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scala is duck friendly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Duck typing is nothing new for developers familiar with dynamic
languages. Its the concept that an objects type is defined not by the
objects class, but by the objects interface. This allows us to write
very flexible code that works on unrelated types (in the inheritance
hierarchy) that happen to share common methods. For instance in Ruby
we could write this code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;walk&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The duck walks&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quack&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The duck quacks&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;walk&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The dog walks&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;quack&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The dog quacks&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;test_animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_animal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will work just fine - trust me. Few statically typed languages can
boast something similar… and Scala happens to be one of them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The duck quacks&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The duck walks&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The dog quacks (barks)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The dog walks&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testDuckTyping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;quack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;walk&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;quack&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;animal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;walk&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testDuckTyping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Duck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quacks&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;duck&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walks&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testDuckTyping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;barks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;walks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is point in the article when Ruby and Python are starting to get
impressed. :-) (I should know - I’ve learnt about this feature after
I’ve written the first draft and got some negative feedback due to my
oversight).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pimp my library&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Want to make the compiler convert between types from time to time to
get access to some richer functionality? Nothing is easier in Scala:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intarray2sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduceLeft&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;intarray2sum&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;     
&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Scala arrays don’t have a + method, but Scala Ints do. When the
compiler sees that the + method is invoked on an object that doesn’t
have it, it starts searching for an implicit conversion to a type that
has it - like Int. Both arrays are converted to their sums and the
sums are added together in the end.&lt;/p&gt;

&lt;h1 id=&quot;playing-around&quot;&gt;Playing around&lt;/h1&gt;

&lt;p&gt;A good way to start exploring Scala is the REPL. Fire it up and type
along:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, Scala&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scala&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bozhidar&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Predef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;My name is &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;My&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bozhidar&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;someNumber&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;someNumber&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Superman&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Batman&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;The Flash&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Superman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Batman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bozhidar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;res6&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Batman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bozhidar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;res7&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res8&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Date&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;java.util.Date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wed&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;May&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EEST&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;2011&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;currentDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;Now&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Wed&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;May&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EEST&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;2011&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;currentDate.toString&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res10&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wed&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;May&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EEST&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;2011&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;currentDate.toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;res11:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wed&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;May&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EEST&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;2011&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;scala&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;currentDate&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;toString&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res12&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Wed&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;May&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;03&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EEST&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;2011&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The REPL has an excellent TAB completion - I used it ofter. You’ll
note from these examples the flexibility and the brevity of Scala’s
syntax - no &lt;strong&gt;;&lt;/strong&gt; to terminate statements (though you’ll have to use ; to
separate more than one expression on a single line). The types of the
variables are inferred by the context, without the need to
specifically specify them - if you assign a string literal to some
variable the compiler will figure out on its own that the variable
must of type String (also note that Scala strings are Java strings -
at least on the JVM). You’ve got a lot of flexibility when you’re
calling methods - you can omit the braces and the dot in some
scenarios - this makes it easy to create Domain Specific Languages in Scala.&lt;/p&gt;

&lt;p&gt;The REPL outputs both the result of the expression you’ve evaluated
and the output from the evaluation (if any). The result from the
evaluation is assigned to automatically generated variables named resX
(res0, res1, res3) and you can refer to them later on.&lt;/p&gt;

&lt;h1 id=&quot;object-orientation-purification&quot;&gt;Object orientation purification&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Everything is an object - there are no primitive types in Scala,
though the compiler will map some Scala types to primitive Java
types for performance whenever possible&lt;/li&gt;
  &lt;li&gt;No operators, just methods
    &lt;ul&gt;
      &lt;li&gt;1 + 2 === 1.+(2)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;No static fields &amp;amp; methods - replaced by companion objects (a
singleton object named the same way as the class). What would be a
static field of a static method in Java will be a companion object
field/method in Scala. This makes the Scala OO model purer than that
of some other languages (of course in languages like Ruby where
classes are objects class variables and methods have more or less
the same meaning and the model is just a pure if not purer). &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scala-lang.org/node/126&quot;&gt;Traits&lt;/a&gt; - the evolution of interfaces
    &lt;ul&gt;
      &lt;li&gt;Traits are interfaces on steroids&lt;/li&gt;
      &lt;li&gt;They can contain state as well as behaviour&lt;/li&gt;
      &lt;li&gt;Think of them more as Ruby’s mixins than Java’s interfaces &lt;/li&gt;
      &lt;li&gt;They can be implemented on the fly by objects&lt;/li&gt;
      &lt;li&gt;They are too complex to be properly explained in one short blog post :-)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;functional-programming&quot;&gt;Functional programming&lt;/h1&gt;

&lt;p&gt;Functional programming has many aspects, but to get the bulk of it you
need just two magical ingredients - support for functions as objects
and a nice array of immutable data structures. Scala, naturally, has
both. Traditionally OOP languages have rarely had much support for
functional programming, which makes it awkward to express some
problems in them. Steve Yegge wrote an excellent article on the
subject some time ago - &lt;a href=&quot;http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html&quot;&gt;“Execution in the kingdom of the
nouns”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Return of the verbs&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Functions are first class objects
    &lt;ul&gt;
      &lt;li&gt;val inc = (x: Int) =&amp;gt; x + 1&lt;/li&gt;
      &lt;li&gt;inc(1) // =&amp;gt; 2&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Higher-order functions
    &lt;ul&gt;
      &lt;li&gt;List(1, 2, 3).map((x: Int) =&amp;gt; x + 1) // =&amp;gt; List(2, 3, 4)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Sugared functions
    &lt;ul&gt;
      &lt;li&gt;List(1, 2, 3).map(x =&amp;gt; x + 1)&lt;/li&gt;
      &lt;li&gt;List(1, 2, 3).map(_ + 1)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Closures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Closures are basically functions that have captured variables from an
external scope (variables that were not parameters of the
functions). Closures are often used as the parameters of higher-order
functions (functions that take functions as parameters):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addToX&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;addToX&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addToX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addToX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addToX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Functional data structures&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Functional programming revolves around the concept of immutability -
nothing is ever changed - we have some input, we get some output and
the input is not changed in the process. Consider a simple operation
like an addition of an element to a list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the operation could modify the list to which the element is being
added&lt;/li&gt;
  &lt;li&gt;the operation can return a new list that is the same as the
original, but has the additional element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Functional programming favours the second approach and Scala as a
functional programming language provides data structures with the
desired behaviour. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List - think here of Lisp lists and not Java lists(unless you’re
thinking of Java linked lists that is)&lt;/li&gt;
  &lt;li&gt;Maps&lt;/li&gt;
  &lt;li&gt;Sets&lt;/li&gt;
  &lt;li&gt;Trees&lt;/li&gt;
  &lt;li&gt;Stacks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scala doesn’t force you into functional programming, though. Apart
from the List, which is always immutable, we have two types of all the
core data structures mentioned - immutable and mutable. The immutable
data structures are those imported by default to promote a more
functional programming style, but you can easily switch to the mutable
versions and program in an imperative manner.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.collection.mutable.Map&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.collection.mutable.Map&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneBook&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Ivan&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phoneBook&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;scala.collection.mutable.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;,&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ivan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bozhidar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phoneBook&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Maya&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;53434&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res13&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;phoneBook.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Maya&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;53434&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Ivan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;456&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bozhidar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;List almighty&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The list is a core data structure in functional programming because it is
recursively defined and therefore it’s very suitable for use in
recursive algorithms. A list is composed of cons cells, each having
two components - the value it holds and a reference to a next cons
cell. The last cell points to a special value - Nil (which happens to
represent an empty list).&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;-&amp;gt; 2&lt;/td&gt;
      &lt;td&gt;-&amp;gt; 3&lt;/td&gt;
      &lt;td&gt;-&amp;gt; Nil&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here’s some things you can do with Scala’s lists:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Neo&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Trinity&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Morpheus&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tank&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Dozer&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Neo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Morpheus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dozer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res4&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Neo&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Trinity&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Morpheus&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Tank&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Dozer&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res6&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NEO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TRINITY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MORPHEUS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TANK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DOZER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res7&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res8&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;T&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res9&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Trinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res10&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res11&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Morpheus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dozer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res12&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dozer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Morpheus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Neo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sortBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res13&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Neo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dozer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Trinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Morpheus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res14&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Trinity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Neo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Morpheus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dozer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;names&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res16&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.lang.String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Morpheus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Tank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Pattern matching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can think of Scala’s pattern matching as a super charged version
of switch, capable of matching on a variety of criteria and of
destructuring that matched objects. Here’s a simple example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;an integer number&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;some string&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmltag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmltag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;something else entirely&amp;quot;&lt;/span&gt;
     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;testMatching&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;something:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res18&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res19&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    
&lt;span class=&quot;n&quot;&gt;res20&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;matrix&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res21&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmltag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xmltag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res22&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;                      
&lt;span class=&quot;n&quot;&gt;res23&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testMatching&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.9&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;          
&lt;span class=&quot;n&quot;&gt;res24&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;something&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entirely&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pattern matching gives you a new way to implement common programming
task. For instance consider the following trivial problem - computing
the length of a list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sure, it’s not tail-recursive, but it’s pretty neat. Now that I
mentioned tail-recursion I should probably say a bit more about
it. Recursive solutions generally look very nice in source form, but
performance-wise are not that great because each recursive call
creates a new stack frame and what’s even worse is that stack frames
are limited - create too many of them and your program will blow
up. This doesn’t mean that we should start coding everything
imperatively, of course. Some compilers have the ability to optimize
away recursive calls if the last thing that happens in the recursive
function is a call to the function itself. In the case of our function &lt;em&gt;length&lt;/em&gt;,
unfortunately, the last call happens to be of the method &lt;strong&gt;+&lt;/strong&gt; of the
object &lt;strong&gt;1&lt;/strong&gt; (of class Int). We can improve the solution this way:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengthrec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lengthrec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nil&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;lengthrec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that we now have a nested helper method with a second parameter,
an accumulator value. This pattern often recurs when dealing with tail
recursion - we take the original recursive definition and introduce a
helper method using accumulator that is tail recursive. The outer
method just calls the helper method and waits for the result. The
Scala compiler will translate internally this recursive function into
a something like a loop and the performance will be greatly improved,
while preserving the clarity of the recursive approach.&lt;/p&gt;

&lt;p&gt;Some languages (like Scheme) will always optimize tail calls. Because
of limitations in the JVM not all tail calls can be optimized in Scala
(for now), but
some tails recursion is better than none.&lt;/p&gt;

&lt;h1 id=&quot;parallel-programming&quot;&gt;Parallel programming&lt;/h1&gt;

&lt;p&gt;With the advent of multi-core processors concurrent programming is
becoming indispensable. Scala’s primary concurrency construct is
actors. Actors are basically concurrent processes that communicate by
exchanging messages. Actors can also be seen as a form of active
objects where invoking a method corresponds to sending a
message. Actors are not a new idea - Scala’s actor library draws heavy
inspiration from Erlang - a programming language notable for its
support for the development of distributed highly parallel systems.&lt;/p&gt;

&lt;p&gt;The Scala Actors library provides both asynchronous and synchronous
message sends (the latter are implemented by exchanging several
asynchronous messages). Moreover, actors may communicate using futures
where requests are handled asynchronously, but return a representation
(the future) that allows to await the reply.&lt;/p&gt;

&lt;p&gt;All actors execute in parallel by their nature. Each actor acts as if
it contains its own dedicated thread of execution.&lt;/p&gt;

&lt;p&gt;Here’s a very simple actor example. The echoActor runs forever and
waits for messages:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.actors.Actor._&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;echoActor&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;received: &amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;echoActor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Chuck Norris is the only real actor!&amp;quot;&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;echoActor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;You don&amp;#39;t find Chuck Norris - Chuck Norris finds you!&amp;quot;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here the actor just waits for messages and responds to them by
printing them to the console. Since the article’s size is already
quite impressive I won’t go into any further details about the actors.&lt;/p&gt;

&lt;p&gt;I want you to know that actors are not the only way to write parallel
programs in Scala. You still have access to the native Java (or .Net)
primitive like threads, locks, executors, etc. Another option is the
Scala implementation of Software Transactional Memory(STM) - a
parallel programming model made recently popular by the Clojure
programming language. Scala’s implementation is a work in progress and
you can have a look a it
&lt;a href=&quot;http://nbronson.github.com/scala-stm/&quot;&gt;here&lt;/a&gt;. STM is basically a
programming technique that lets you model concurrent operations in a
way similar to db transactions - you combine the critical code in a
transaction and if possible execute it and commit the transaction,
otherwise just rollback it and maybe try again after a while. Note that this is a
&lt;em&gt;great&lt;/em&gt; oversimplification of what’s actually happening - for all the
gory details you should read the exhaustive documentation.&lt;/p&gt;

&lt;h1 id=&quot;tools&quot;&gt;Tools&lt;/h1&gt;

&lt;p&gt;We all know that even the best programming language can be rendered
useless by the lack of good development tools for it - powerful text
editors, integrated development environments, profilers, build tools,
etc. Scala is a relatively young programming language that became
really popular just recently and as a result there are still no
development environments for Scala as powerful as those for Java
(although since both languages use static typing eventually the
environments will be on par). Most popular Java IDEs features feature
some form of Scala support and most Java build tools as well.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IDE
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; - the ultimate
Scala IDE at the moment. It works quite well, but it’s a bit
buggy that the moment (which is to be expected of something with
some many beta features).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://www.scala-ide.org/&quot;&gt;Eclipse&lt;/a&gt; - the most
popular Java IDE has a Scala plug-in that
until recently was mostly useless, but currently is being
totally reworked and the next stable version will bring usable
Scala support to the Eclipse users. The development of the new
Scala plug-in is headed by none other than Martin Odersky
himself. Don’t bother using the older version at all - just grab
the latest beta.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;http://wiki.netbeans.org/Scala69&quot;&gt;NetBeans&lt;/a&gt; - Presently the
Scala support in NetBeans is a bit basic, but it’s usable.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;a href=&quot;https://github.com/aemoncannon/ensime&quot;&gt;Emacs ENSIME&lt;/a&gt; - Ok, I admit - Emacs is not actually an IDE
per se, but it’s still much more powerful than most IDEs. Emacs
happens to have an excellent Scala mode, called ENSIME that
gives you code completion, instant feedback, an integrated REPL,
SBT integration, refactorings and other goodies in an Emacs
package. The project attempts to be the equivalent of the legendary SLIME (
an Emacs mode for Common Lisp) for Scala. ENSIME is integrated
into the &lt;a href=&quot;https://github.com/bbatsov/emacs-dev-kit&quot;&gt;Emacs Dev Kit&lt;/a&gt;(maintained by yours truly).&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Scala distribution
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;scala - A Scala REPL for exploratory programming; it’s also the
Scala “interpreter” and the Scala class runner&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;scalac - the Scala compiler&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;fsc - fast Scala compiler. The Scala compiler is notoriously
slow to start and fsc is a partial solution to this problem. The fsc runs
as a daemon and waits to receive files to compile. Maven’s
scala:cc and sbt’s ~compile continuous compilation task use fsc internally.  &lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;sbaz - The Scala Bazaar System, sbaz for short, is a packaging
system developed to automate the task of mainaining a Scala
installation. The program allows you to easily upgrade your
installation as soon as a new version is available. You can also
contribute your own packages, and make them easily available to
other sbaz users.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build tools
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://buildr.apache.org&quot;&gt;Apache Buildr&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/simple-build-tool/&quot;&gt;SBT&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;killer-apps&quot;&gt;Killer apps&lt;/h1&gt;

&lt;p&gt;Scala presently doesn’t have that many killer apps. Here are the most
prominent: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://liftweb.net/&quot;&gt;Lift web framework&lt;/a&gt; - Lift is a web framework
that has cherry-picked some of the best ideas from existing frameworks and
added some novelties of its own to harness the capabilities of the
Scala programming language.
    &lt;ul&gt;
      &lt;li&gt;Lazy page loading&lt;/li&gt;
      &lt;li&gt;Parallel rendering&lt;/li&gt;
      &lt;li&gt;Comet &amp;amp; Ajax&lt;/li&gt;
      &lt;li&gt;Wiring&lt;/li&gt;
      &lt;li&gt;Designer friendly templates&lt;/li&gt;
      &lt;li&gt;Wizard&lt;/li&gt;
      &lt;li&gt;Security&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.playframework.org/&quot;&gt;Play framework&lt;/a&gt; - Play focuses on
developer productivity and targets RESTful architectures. It has
both a Java and a Scala API. It’s considered by many to be the first
Java web framework that was actually made by web developers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://akka.io/&quot;&gt;Akka&lt;/a&gt; - A powerful library for writing concurrent applications
using Actors, STM &amp;amp; Transactors. It has both Scala and Java API.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.google.com/p/simple-build-tool/&quot;&gt;SBT&lt;/a&gt; - a powerful
build tool&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;success-stories&quot;&gt;Success stories&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.artima.com/scalazine/articles/twitter_on_scala.html&quot;&gt;Twitter&lt;/a&gt;  - you remember how often Twitter used to go down because of
overloads and suddenly the problems stopped - no, this was the
moment in which Twitter’s backend was rewritten in Scala (that
moment never actually came)… I have it on good authority that the
problem was actually resolved by great improvements in their Ruby
code base. But they use Scala there - Twitter had a Ruby-based
queueing system that we used for communicating between the Rails
front ends and the daemons that often crashed under heavy loads, and
they ended up replacing that with one written in Scala.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scala-lang.org/node/5130&quot;&gt;Four square&lt;/a&gt; - Four square
uses Lift as well&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scala-lang.org/node/6436&quot;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SAP&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.infoq.com/articles/guardian_scala&quot;&gt;Guardian.co.uk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;comparison-to-java&quot;&gt;Comparison to Java&lt;/h1&gt;

&lt;p&gt;It’s only natural that Java developers are interested in how Scala
stacks up to Java:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pros
    &lt;ul&gt;
      &lt;li&gt;Scala is fast, just as fast as Java. Some might wonder why this
is a feature - they should take a look at the performance of the
most of the other JVM langs and they’ll understand. Granted, all
of the performance benefits come from the use of static typing
in Scala, but Scala’s code is often as concise as the code
written in a dynamic language like Ruby or Groovy. &lt;/li&gt;
      &lt;li&gt;Great Java interoperability&lt;/li&gt;
      &lt;li&gt;Scala removes a lot of the incidental complexity of programming
and let’s you express your thoughts directly in the source code&lt;/li&gt;
      &lt;li&gt;The syntax of Scala is mostly uniform and you can usually easily
create new abstractions that look like language built-ins.&lt;/li&gt;
      &lt;li&gt;Scala features great support for parallel programming.&lt;/li&gt;
      &lt;li&gt;Runs on both Java and .Net (at least in theory)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cons
    &lt;ul&gt;
      &lt;li&gt;Some aspects of the language are fairly complex like the
subtyping rules for instance. This will probably scare off some
people, but I can assure you that this complexity is superficial
and once you’ve grasped enough of Scala everything will fall
into place and seem to you the most natural thing in the world.&lt;/li&gt;
      &lt;li&gt;Calling Scala from Java is not as easy as calling Java from
Scala.&lt;/li&gt;
      &lt;li&gt;The core API is still subject to constant changes and most new
Scala version are not backward compatible with the old ones
(unlike in Java).&lt;/li&gt;
      &lt;li&gt;Scala’s community (albeit very friendly and helpful) is current
tiny compared to Java’s. You might not get an assistance from
the community as quickly as you’d get it for Java related
problems.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Books 
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://programming-scala.labs.oreilly.com/&quot;&gt;Programming Scala&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;great free on-line book&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.artima.com/pins1ed/&quot;&gt;Programming in Scala&lt;/a&gt; - the holy
bible of Scala. The first edition is available for free on-line.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Blogs &amp;amp; Websites
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.scala-lang.org&quot;&gt;Official web site&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.codecommit.com/blog/&quot;&gt;Daniel Spiewak’s blog&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://daily-scala.blogspot.com/&quot;&gt;Daily Scala&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Exercises
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://aperiodic.net/phil/scala/s-99/&quot;&gt;99 Scala problems&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;Scala’s future is nothing but bright. It uses static typing, which is
familiar to so many Java and C# developers, and is also the
prerequisite for creating very helpful IDEs. Scala runs on the
venerable Java platform and easily leverages all of its power while
adding a lot of magic of its own - implicits, type inference, pattern
matching, functional programming support, actors and others.&lt;/p&gt;

&lt;p&gt;It’s my personal opinion that if any language has the chance to
displace Java as the king of the world - that might be Scala. In all
likelihood this will never happen - rarely has the greatest solutions
enjoyed the greatest popularity (remember the Betamax vs VHS?). I do
believe, however, that Scala will capture a significant market share
in the coming years - mainly due to it excellent support for building
distributed systems.&lt;/p&gt;

&lt;p&gt;Until next time and the next chapter of the story, dedicated to the
rising star of the JVM world - Clojure.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/Groovy/2011/05/06/jvm-langs-groovy</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/Groovy/2011/05/06/jvm-langs-groovy.html"/>
    <title>Java.next() - The Groovy Programming Language</title>
    <updated>2011-05-06T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;In a series of articles labeled “Java.next()” I’ll be discussing
modern alternatives to the Java programming language for use with the
Java Platform. This is the first installment of the series - “The
Groovy Programming Language”.&lt;/p&gt;

&lt;h1 id=&quot;overture&quot;&gt;Overture&lt;/h1&gt;

&lt;p&gt;We all know and love the Java &lt;em&gt;platform&lt;/em&gt;(note the emphasis on
platform) for a couple of obvious reasons. Most notably it features a
huge high quality standard library and a legendary execution
environment - the Java Virtual Machine(JVM). The JVM is known to
posses the following qualities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Runs on all major platforms&lt;/li&gt;
  &lt;li&gt;Enterprise ready&lt;/li&gt;
  &lt;li&gt;Extremely stable&lt;/li&gt;
  &lt;li&gt;Extremely fast&lt;/li&gt;
  &lt;li&gt;Highly customizable - many aspects of its work can easily be
adjusted such as GC settings, heap settings, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a terrific community around the Java platform that has
contributed an immense amount of high quality software vital to the
success of Java. Hibernate, Spring, Eclipse, NetBeans, the myriad of
Apache projects are all community efforts.&lt;/p&gt;

&lt;p&gt;So far so good, but it’s not all rainbows and unicorns in the land of
Java. The Java programming language is a common source of gripe
amongst many developers for various reasons. I’ll list here some of
the more notable of them:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s not a pure OOP language(there is a difference between primitive
and reference data types)&lt;/li&gt;
  &lt;li&gt;It uses static typing(highly subjective topic, but commonly brought up)&lt;/li&gt;
  &lt;li&gt;It doesn’t have support for closures(which instantly kills half of
functional’s programming ideas such as higher order functions)&lt;/li&gt;
  &lt;li&gt;It has limited meta programming capabilities(compared to Ruby and
Lisp for instance)&lt;/li&gt;
  &lt;li&gt;There is no concept of top-level procedures(outside of class
definitions)(this makes Java unsuitable for creating “script” programs)&lt;/li&gt;
  &lt;li&gt;Its syntax is too verbose&lt;/li&gt;
  &lt;li&gt;It’s not suitable for the creation of DSLs&lt;/li&gt;
  &lt;li&gt;Its development is sluggish and restrained by the corporate promise of backward compatibility &lt;/li&gt;
  &lt;li&gt;It’s an imperative language&lt;/li&gt;
  &lt;li&gt;Its parallel programming model is revolving mostly around locks and
threads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Naturally there are some languages that alleviate some(most) of Java’s
problems such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;Lisp&lt;/li&gt;
  &lt;li&gt;Erlang&lt;/li&gt;
  &lt;li&gt;Haskell&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They all, however, lack(with their default implementations at least)
an execution environment that can match the JVM. They also lack Java’s
immense amount of libraries currently available. When enthusiasts
started porting existing languages to the JVM this came as no surprise
- it was only logical. A good language get a good execution
environment. For instance some folks ported Ruby to Java which
resulted in JRuby, Python also got a Java port called Jython. Though a
lot of good has come from such ports they was also a price to pay. In
the case of Ruby and Python some libraries are not written in
Ruby/Python, but in C for performance reasons, which naturally leads
to problems when you factor in a Java implementation of the
language. There is also the fact that the JVM(currently) doesn’t have
support for dynamic memory dispatching which is feature vital for
dynamically typed languages to get a decent performance. For this
reason Jython is notoriously slow. The JRuby team did a much better
work, circumvented a lot of the JVM limitations and actually managed
to create a Ruby implementation that in some scenarios beats the
performance of the standard MRI Ruby 1.9 with it’s custom YARV virtual
machine implemented in C. JRuby will be the object of a further
discussion down the road. Some of the languages that were ported to
the JVM suffer from another problem as well - it’s not straightforward
and efficient in them to reuse existing Java libraries directly.&lt;/p&gt;

&lt;p&gt;I’d like to lead this discussion in another direction, however -
programming languages that were implemented from scratch with the JVM
as their execution environment. While there are many of those three
stand out and have gathered a significant momentum in recent
years. They will be the subject of this post and the following
two. Without further adieu I’d like you to meet Groovy, Scala and
Clojure.&lt;/p&gt;

&lt;p&gt;We’ll begin our discussion with Groovy…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Before I start I’d like to point out that my knowledge of Groovy is
limited compared to my knowledge of Scala and Clojure. Despite this I
decided to share my thoughts on the language because it’s certainly one
of the most popular JVM languages out there. If I’ve made any errors
in the article I didn’t mean to insult anyone with my ignorance and
I’ll certainly be glad to fix them when someone points them out.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;a-little-bit-of-groovy-history&quot;&gt;A little bit of Groovy history&lt;/h1&gt;

&lt;p&gt;James Strachan first talked about the development of Groovy in his
&lt;a href=&quot;http://radio-weblogs.com/0112098/2003/08/29.html&quot;&gt;blog&lt;/a&gt; in August
2003. Several versions were released between 2004 and 2006. After the
JCP(yep, you read that correct - Groovy is actually a Java standard
which is great or scary depending on your point of view)
standardization process began, the version numbering was changed and a
version called “1.0” was released on January 2, 2007. After various
betas and release candidates numbered 1.1, on December 7, 2007, Groovy
1.1 Final was released and immediately rebranded as Groovy 1.5 as a
reflection of the many changes that were made.&lt;/p&gt;

&lt;p&gt;In July 2009, Strachan wrote on his blog that “I can honestly say if
someone had shown me the Programming in Scala book by Martin Odersky,
Lex Spoon &amp;amp; Bill Venners back in 2003 I’d probably have never created
Groovy.” Strachan left the project silently a year before the
Groovy 1.0 release in 2007. Leadership of the project was assumed by
Guillaume Laforge (Project Manager and JSR-241 Spec Lead). Under his
guidance Groovy thrived and his risen to be arguably the most widely
used JVM language apart from Java.&lt;/p&gt;

&lt;p&gt;Currently the development of Groovy proceeds with a very fast pace and
the latest major update 1.8.0 was released just a couple of days ago.&lt;/p&gt;

&lt;h1 id=&quot;installation--getting-started&quot;&gt;Installation &amp;amp; Getting started&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Platform independent installation&lt;/strong&gt;
These instructions describe how to install a binary distribution of Groovy.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;download a &lt;a href=&quot;http://groovy.codehaus.org/Download&quot;&gt;binary distribution of Groovy&lt;/a&gt; and unpack it into some file on your local file system&lt;/li&gt;
  &lt;li&gt;set your GROOVY_HOME environment variable to the directory you unpacked the distribution&lt;/li&gt;
  &lt;li&gt;add GROOVY_HOME/bin to your PATH environment variable&lt;/li&gt;
  &lt;li&gt;set your JAVA_HOME environment variable to point to your JDK. On OS
X this is /Library/Java/Home, on other unixes its often /usr/java
etc. If you’ve already installed tools like Ant or Maven you’ve
probably already done this step.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance here’s the relevant information of my shell’s
configuration:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/java/latest
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GROOVY_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/groovy-1.8.0
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GROOVY_HOME&lt;/span&gt;/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should now have Groovy installed properly. You can test this by
typing the following in a command shell:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; groovysh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which should create an interactive groovy shell where you can type
Groovy statements. Or to run the Swing interactive console type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; groovyConsole
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To run a specific Groovy script type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; groovy SomeScript.groovy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Linux installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Most Linux distributions provide Groovy through their integrated
package management system. On Debian(and derivatives like Ubuntu) you
can install it like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo apt-get install groovy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On Red Hat systems the magic incantation looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; sudo yum install groovy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Personally I’d prefer the platform-independent installation method,
since some distribution package Groovy in a non-standard manner which
confuses IDEs for instance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Groovy features a native &lt;a href=&quot;http://dist.codehaus.org/groovy/distributions/installers/windows/nsis/groovy-1.8.0-installer.exe&quot;&gt;Windows installer&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;meet-groovy&quot;&gt;Meet Groovy&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;“Groovy is like a super version of Java. It can leverage Java’s
enterprise capabilities but also has cool productivity features like
closures, builders and dynamic typing. If you are a developer, tester
or script guru, you have to love Groovy.”&lt;/em&gt; - praise for Groovy from
&lt;a href=&quot;http://groovy.codehaus.org/&quot;&gt;http://groovy.codehaus.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Groovy is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is one of the two standard languages for the JVM(the other is Java
of course)&lt;/li&gt;
  &lt;li&gt;is an agile and dynamic language for the Java Virtual Machine&lt;/li&gt;
  &lt;li&gt;builds upon the strengths of Java but has additional power features inspired by languages like Python, Ruby and Smalltalk&lt;/li&gt;
  &lt;li&gt;makes modern programming features available to Java developers with almost-zero learning curve&lt;/li&gt;
  &lt;li&gt;supports Domain-Specific Languages and other compact syntax so your
code becomes easy to read and maintain &lt;/li&gt;
  &lt;li&gt;makes writing shell and build scripts easy with its powerful processing primitives, OO abilities and an Ant DSL&lt;/li&gt;
  &lt;li&gt;increases developer productivity by reducing scaffolding code when developing web, GUI, database or console applications&lt;/li&gt;
  &lt;li&gt;simplifies testing by supporting unit testing and mocking out-of-the-box&lt;/li&gt;
  &lt;li&gt;seamlessly integrates with all existing Java classes and libraries&lt;/li&gt;
  &lt;li&gt;compiles straight to Java bytecode so you can use it anywhere you
can use Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of Groovy’s most compelling features are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pure OOP language&lt;/li&gt;
  &lt;li&gt;Mostly Java compatible syntax&lt;/li&gt;
  &lt;li&gt;Optional typing&lt;/li&gt;
  &lt;li&gt;No need to wait for a future version of Java to get:
    &lt;ul&gt;
      &lt;li&gt;Closures&lt;/li&gt;
      &lt;li&gt;Attributes&lt;/li&gt;
      &lt;li&gt;Smart switch&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Duck typing&lt;/li&gt;
  &lt;li&gt;BigInteger based arithmetic
    &lt;ul&gt;
      &lt;li&gt;This deserves some special explanation because of a rather
strange design decision in Groovy. Groovy will create a
BigIntiger out of a large enough number literal, but it won’t
promote the result of an integer operation into BigInteger - 
the result will actually overflow, in contrast to the semantics of most
other dynamically typed languages. Multiply 1000 * 1000000000
and you will end up with -727379968 in Groovy.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;SQL, XML &amp;amp; Swing improvements&lt;/li&gt;
  &lt;li&gt;Unified data access API&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A core idea, guiding the design of Groovy, is making it easy to use for
existing Java developers. Groovy’s designers have gone so far in that
direction that the Groovy compiler will happily compile most Java
source files without the need for any modifications. Groovy, however,
builds heavily upon the standard Java’s syntax and you’ll do well to
get a grip of Groovy’s core idioms. Groovy’s syntax in a nutshell:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;c&quot;&gt;// old school Java code, but also valid Groovy code&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// idiomatic Groovy&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// dynamic variable definition&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// GString featuring string interpolation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, $name&amp;quot;&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// =&amp;gt; &amp;quot;Hello, Bozhidar&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// statically typed variable&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;songName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Coding in the Name of&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Now playing - $songName&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&amp;quot;this is a multiline&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;string. There is not need to embed&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;newline characters in it&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;multiline&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// method definition&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, $name!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// method invocation&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// safe dereferencing&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;List size is: ${list?.size}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;showSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// this is the important part&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;showSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// a list&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Zagorka&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bolyarka&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Shumensko&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Ariana&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// list access&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;My favourite beer is ${beers[1]}&amp;quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;beers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// imports can appear anywhere and support the creation of aliases&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.sql.Date&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDate&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// java.util package is automatically imported in Groovy so this is java.util.Date&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2011&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// language support for regular expressions&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, Groovy&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+,&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+/)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;It matches&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// range filtering with higher-order functions&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findAll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// map&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capitols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Bulgaria:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Sofia&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;USA:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Washington&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;England:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;London&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;France:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Paris&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capitols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Bulgaria&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// =&amp;gt; Sofia&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capitols&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;France&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;// =&amp;gt; Paris&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// class definition&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Name {$name}, age {$age}&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Bozhidar&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;From the brief overview you might have noticed that like Ruby and
Python Groovy has language support for commonly used data structures
such as lists, maps, ranges and regular expressions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List - def number = [1, 2, 3]&lt;/li&gt;
  &lt;li&gt;Map - def countries = [BG: “Bulgaria”, DE: “Germany]&lt;/li&gt;
  &lt;li&gt;Range - def range = 1..1000 &lt;/li&gt;
  &lt;li&gt;Regular expressions - def whitespace = /\s+/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might have noticed another interesting feature in Groovy - the
ability to combine static type(like in Java) with dynamic typing(like
in Ruby and Python). The keyword &lt;em&gt;def&lt;/em&gt; is used to introduce
dynamically typed variables in Groovy.&lt;/p&gt;

&lt;p&gt;Groovy comes with its very own standard library(GDK) which builds upon
the JDK(for instance the File and String classes are enhanced in
Groovy) and offer some new features like the Groovy’s famous builders.&lt;/p&gt;

&lt;h1 id=&quot;oop-in-groovy&quot;&gt;OOP in Groovy&lt;/h1&gt;

&lt;p&gt;Groovy is a pure object oriented language. Everything is an object,
operations are methods, etc. Compared the Java the picture looks right
about this way:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Similar capabilities to Java
    &lt;ul&gt;
      &lt;li&gt;Define classes, interfaces, enums, annotations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Differences to Java
    &lt;ul&gt;
      &lt;li&gt;Classes (and interfaces etc.) public by default&lt;/li&gt;
      &lt;li&gt;Methods public by default&lt;/li&gt;
      &lt;li&gt;Property support within classes (auto-setters/getters)&lt;/li&gt;
      &lt;li&gt;Duck typing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java developers should feel mostly at home.&lt;/p&gt;

&lt;h1 id=&quot;sql-and-xml-handling&quot;&gt;SQL and XML handling&lt;/h1&gt;

&lt;p&gt;Groovy offers some nice improvements over JDBC and JAXP for handling
database queries and XML parsing.&lt;/p&gt;

&lt;p&gt;Groovy removes a lot of boilerplate when dealing with SQL queries
compared to the native JDBC API:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;groovy.sql.Sql&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jdbc:mysql://host/db&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;com.mysql.jdbc.Driver&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;eachRow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;select * from tableName&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; -- ${it.firstName} --&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This code is written for a connection to a MySQL database. You will
need to adjust all the parameters to newInstance to connect to your
database, especially username and password.  Finally the third line
calls the eachRow method of sql, passing in two arguments, the first
being the query string, the second being a closure to print out some
values.  Notice that in the closure the fields of “it” are accessed in
two different ways. The first is as a simple field reference,
accessing the id field of it. The second is the included Groovy
expression mentioned above.&lt;/p&gt;

&lt;p&gt;So the output from a row might look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;1 -- Bozhidar --&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;2 -- Maya --&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;3 -- Kate --&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;4 -- Valentine --&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;XML processing is common enough task in computing and Groovy’s
developers tried to make it simple and straightforward as
possible. Let’s parse the following file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;books&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;book&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dune&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;author&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;firstname=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Frank&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lastname=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Herbert&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;book&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dune Messiah&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;author&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;firstname=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Frank&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lastname=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Herbert&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;book&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Children of Dune&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;author&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;firstname=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Frank&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lastname=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Herbert&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;book&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;A Game of Thrones&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;author&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;firstname=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;George&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lastname=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Martin&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/book&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/books&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All the code we need to write is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XmlSlurper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;books.xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Title = ${it.title}, Author: ${it.author.@firstname} ${it.author.@lastname}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ruby and Python developers probably aren’t particularly impressed, but
I can only imagine the look on the faces of Java developers that are
generally required to write huge amount of boilerplate code when
dealing with XML.&lt;/p&gt;

&lt;h1 id=&quot;builders&quot;&gt;Builders&lt;/h1&gt;

&lt;p&gt;Groovy has special syntax support for List and Maps. This is great
because it gives a concise representation of the actual object being
defined, so its easier to keep track of what a program or script is
doing. But what about programs which contain arbitrary nested tree
structures. Surely, they are the hardest ones to keep track of what is
going on. Isn’t that an area where syntactic help will be most
beneficial?&lt;/p&gt;

&lt;p&gt;The answer is definitely yes and Groovy comes to the party with its
builder concept. You can use it for DOM-like APIs or Ant tasks or
Jelly tags or Swing widgets or whatever. Each may have their own
particular factory mechanism to create the tree of objects - however
they can share the same builder syntax to define them - in a concise
alternative to XML or lengthy programming code.&lt;/p&gt;

&lt;p&gt;One use for builders is the generation of markup:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;groovy.xml.*&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MarkupBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Groovy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Groovy power!&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Result:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello, Groovy!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Groovy power!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Groovy power!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Groovy power!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Builders can also be used to create Swing GUIs. Here’s a very small example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;groovy&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.awt.FlowLayout&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;groovy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;swing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SwingBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;langs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Groovy&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Scala&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Clojure&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gui&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;size:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;290&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;title:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Groovy&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Swing&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;layout:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlowLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;panel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;layout:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FlowLayout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;langs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;radioButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;text:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;text:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Perform&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Magic&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;actionPerformed:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;optionPane&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;message:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Feel the power of Groovy!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;createDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;text:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Quit&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nl&quot;&gt;actionPerformed:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)})&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Run the code to see the resulting GUI!&lt;/p&gt;

&lt;h1 id=&quot;groovy-tooling&quot;&gt;Groovy tooling&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;IDE
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; - the ultimate
Groovy IDE. It’s excellent Groovy support is part of its open
source Community Edition.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://groovy.codehaus.org/Eclipse+Plugin&quot;&gt;Eclipse&lt;/a&gt; - the most
popular Java IDE has an actively maintained Groovy plugin&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://netbeans.org/features/groovy/&quot;&gt;NetBeans&lt;/a&gt; - Like IDEA
NetBeans features built-in Groovy support&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Groovy distribution
    &lt;ul&gt;
      &lt;li&gt;groovysh - A Groovy REPL for exploratory programming&lt;/li&gt;
      &lt;li&gt;groovyConsole - A GUI groovy shell with extended capabilities,
that is handy for the development and testing of small Groovy scripts&lt;/li&gt;
      &lt;li&gt;groovyc - the Groovy compiler&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Build tools
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://maven.apache.org&quot;&gt;Apache Maven&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://buildr.apache.org&quot;&gt;Apache Buildr&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;killer-apps&quot;&gt;Killer apps&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://grails.org&quot;&gt;Grails&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;Groovy port of Ruby on Rails&lt;/li&gt;
      &lt;li&gt;Leverages the best Java technologies
        &lt;ul&gt;
          &lt;li&gt;Hibernate&lt;/li&gt;
          &lt;li&gt;Spring&lt;/li&gt;
          &lt;li&gt;Tomcat&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://gradle.org&quot;&gt;Gradle&lt;/a&gt; - powerful build tool, considered by many vastly superior to
Maven. Several high profile projects(such as Hibernate) already
migrated their builds to Gradle.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://griffon.codehaus.org/&quot;&gt;Griffon&lt;/a&gt; - a Grails like application
framework for developing desktop applications&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;common-use-cases&quot;&gt;Common use cases&lt;/h1&gt;

&lt;p&gt;Groovy is a general purpose language, but it’s used for some tasks
more often than for others. It’s extremely suitable for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;web application development(usually with Grails)&lt;/li&gt;
  &lt;li&gt;scripting(although you have to factor in the cold startup time of
the JVM before you start writing all your scripts in Groovy)&lt;/li&gt;
  &lt;li&gt;tests development - it’s a common practice in many Java projects to
have the tests written in Groovy&lt;/li&gt;
  &lt;li&gt;GUI development(usually with Griffon)&lt;/li&gt;
  &lt;li&gt;Rapid prototyping - you’d do a quick app prototype in Groovy as a
proof on concept and then you’d create a Java application based on
it&lt;/li&gt;
  &lt;li&gt;Exploratory programming - the groovysh is a great way to test class
capabilities, methods and ideas with almost zero overhead - no
annoying compile/run cycles to slow you down&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When performance is critical you’d probably want to avoid
Groovy. According to some benchmarks around the Internet(like
&lt;a href=&quot;http://stronglytypedblog.blogspot.com/2010/02/java-vs-scala-vs-groovy-vs-groovy.html&quot;&gt;this one&lt;/a&gt;)
Groovy is much slower than Java for certain tasks. I, however, haven’t
read any new benchmarks on the subject and have no idea how reliable
the old ones are and how relevant they are to the current Groovy
version.&lt;/p&gt;

&lt;h1 id=&quot;future-prospects&quot;&gt;Future prospects&lt;/h1&gt;

&lt;p&gt;With so many languages being created all the time developers
naturally ask themselves the same question over and over again -
should I waste my time learning this language? Related questions seem
to be:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Will it endure the test of time?&lt;/li&gt;
  &lt;li&gt;Does it have a vibrant and committed community around it?&lt;/li&gt;
  &lt;li&gt;Can I find professional support?&lt;/li&gt;
  &lt;li&gt;Does it integrate well with out current infrastructure?&lt;/li&gt;
  &lt;li&gt;Does it have good tooling?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After all most of the currently popular languages like Java, C# and
PHP are nothing spectacular on their own, but have a combination of
factors that worked in their favour to get them to the top - solid
companies behind them, many deployment options and just the right
amount of beefing up/simplifying C/C++ make existing developers transition to the
new languages a relatively easy and painless experience.&lt;/p&gt;

&lt;p&gt;SpringSource(the company responsible for the creation of the popular
Spring framework, now a division of VMWare) employs most of the core
Groovy developers and offers both &lt;a href=&quot;http://www.springsource.com/developer/grails&quot;&gt;Groovy and Grails support&lt;/a&gt;. The fact
that a company such as this one believes in the technology is very
important whey you’re trying to sell using Groovy in your current
company. And if you’re existing infrastructure is built around Java -
well, you have next to nothing to worry about, except maybe will Java 7
deliver the promised speed improvement for dynamic languages
implemented on top of it.&lt;/p&gt;

&lt;p&gt;Presently the Groovy community is vast and rapidly growing. The
language itself - constantly evolving. &lt;/p&gt;

&lt;p&gt;NetBeans and IntelliJ have built-in Groovy support, which is a big
testament to the language’s popularity as well.&lt;/p&gt;

&lt;p&gt;In a sentence I don’t see Groovy disappearing or dying anytime soon
even if its original creator has lost faith in it.&lt;/p&gt;

&lt;h1 id=&quot;groovy-resources&quot;&gt;Groovy resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Books
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.manning.com/koenig2/&quot;&gt;“Groovy in Action”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://pragprog.com/titles/vslg/programming-groovy&quot;&gt;“Programming Groovy”&lt;/a&gt;    &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;On-line resources
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://groovy.codehaus.org/User+Guide&quot;&gt;Official documentation&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;epilogue&quot;&gt;Epilogue&lt;/h1&gt;

&lt;p&gt;Groovy is a language aiming to bring dynamic productivity to Java
developer without introducing them to a steep learning curve. The
language is beautifully architectured and integrates seamlessly with
the existing Java libraries and infrastructure. My biggest gripe with
Groovy was the lack of advanced support for parallel and concurrent
programming. A few days before I wrote this article, however, Groovy
1.8.0 was released and it features the excellent library for parallel
programming &lt;a href=&quot;http://gpars.codehaus.org/&quot;&gt;GPars&lt;/a&gt;. Groovy’s performance
is not stellar at this point, but I guess
this will be improved upon in Java 7. &lt;/p&gt;

&lt;p&gt;With its easy to grasp Java-like syntax Groovy is a solid contender
for the attention of Java developers. A growing number of Groovy
related job offerings is a sign of Groovy’s acceptance as a industrial
strength tool. &lt;/p&gt;

&lt;p&gt;Some people criticize Groovy for the lack of innovation and claim that
it’s simply an amalgam of ideas borrowed from other languages. I don’t
see nothing bad with that approach as long as the features are
tastefully combined. Groovy might not be the most elegant language out
there, but it’s one of the most practical ones and will help you get
the job done.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;P.S. Coming up next is a discussion of the Scala programming
language.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Misc/Common Lisp/2011/05/04/lisp-problems</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Misc/Common Lisp/2011/05/04/lisp-problems.html"/>
    <title>Lisp Problems</title>
    <updated>2011-05-04T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;This is a remake of the P-99: Ninety-Nine Prolog Problems collection
that Werner Hett assembled over several years of teaching at the University of
Applied Sciences (Berner Fachhochschule) at Biel-Bienne,
Switzerland. The collection is structured into seven sections. I have
renumbered the problems in order to get more freedom to rearrange
things within the sections.&lt;/p&gt;

&lt;p&gt;The purpose of this problem collection is to give you the opportunity
to practice your skills in logic programming. Your goal should be to
find the most elegant solution of the given problems. Efficiency is
important, but logical clarity is even more crucial. Some of the
(easy) problems can be trivially solved using built-in
functions. However, in these cases, you learn more if you try to find
your own solution.&lt;/p&gt;

&lt;p&gt;The problems have different levels of difficulty. Those marked with a
single asterisk (*) are easy. If you have successfully solved the
preceeding problems you should be able to solve them within a few (say
15) minutes. Problems marked with two asterisks (**) are of
intermediate difficulty. If you are a skilled Prolog programmer it
shouldn’t take you more than 30-90 minutes to solve them. Problems
marked with three asterisks (***) are more difficult. You may need
more time (i.e. a few hours or more) to find a good solution.&lt;/p&gt;

&lt;h2 id=&quot;lisp-lists&quot;&gt;Lisp Lists&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;1.01 (*) Find the last element of a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do not use the built-in LAST function.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p101.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.02 (*) Find the penultimate(last but one) element of a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do not use a combination of LAST and BUTLAST.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;penultimate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p102.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.03 (*) Find the nth element of a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do not use the built-in function NTH. The first element in the list is number 0.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-nth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p103.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.04 (*) Find the number of elements of a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do not use the built-in function LENGTH.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p104.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.05 (*) Reverse a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do not use the built-in function REVERSE.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;my-reverse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p105.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.06 (*) Find out whether a list is a palindrome.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A palindrome can be read forward or backward; e.g. (1 2 3 2 1).&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;palindrome-p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NIL&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;palindrome-p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p106.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.07 (**) Flatten a nested list structure.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Transform a list, possibly holding lists as elements into a ‘flat’
list by replacing each list with its elements (recursively).&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;flatten&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p107.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.08 (**) Eliminate consecutive duplicates of list elements.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If a list contains repeated elements they should be replaced with a
single copy of the element. The order of the elements should not be
changed.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p108.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.09 (**) Pack consecutive duplicates of list elements into sublists.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If a list contains repeated elements they should be placed in
separate sublists.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;pack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p109.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.10 (*) Run-length encoding of a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Use the result of problem 1.09 to implement the so-called run-length
encoding data compression method. Consecutive duplicates of elements
are encoded as terms [N,E] where N is the number of duplicates of the
element E.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p110.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.11 (*) Modified run-length encoding.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Modify the result of problem 1.10 in such a way that if an element has
no duplicates it is simply copied into the result list. Only elements
with duplicates are transferred as (number element) terms.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encode-modified&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p111.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.12 (**) Decode a run-length encoded list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Given a run-length code list generated as specified in problem
1.11. Construct its uncompressed version.&lt;/em&gt; &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt; 
&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;decode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p112.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.13 (**) Run-length encoding of a list (direct solution).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Implement the so-called run-length encoding data compression method
directly. I.e. don’t explicitly create the sublists containing the
duplicates, as in problem 1.09, but only count them. As in problem
1.11, simplify the result list by replacing the singleton terms (1 X)
by X.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;encode-direct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p113.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.14 (*) Duplicate the elements of a list.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;duplicate-elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p114.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.15 (**) Duplicate the elements of a list a given number of times.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;duplicate-elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p115.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.16 (**) Drop every N’th element from a list.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;LISP-PROBLEMS&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;drop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p116.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.17 (*) Split a list into two parts; the length of the first part is given.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;LISP-PROBLEMS&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p117.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.18 (**) Extract a slice from a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Given two indices, START and END, the slice is the list containing the elements between them in the original list (both limits included). Start counting the elements with 0.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;slice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p118.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.19 (**) Rotate a list N places to the left.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rotate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rotate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p119.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: Use the predefined functions LENGTH and APPEND, as well as the result of problem 1.17.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.20 (*) Remove the n’th element from a list.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;remove-nth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p120.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.21 (*) Insert an element at a given position into a list.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p121.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.22 (*) Create a list containing all integers within a given
  range.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;range&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p122.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.23 (**) Extract a given number of randomly selected elements from a list.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The selected items shall be put into a result list.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rnd-select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rnd-select&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p123.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: Use the built-in random number generator RANDOM and MY-NTH.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.24 (*) Lotto: Draw N different random numbers from the set 1..M.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The selected numbers shall be put into a result list.&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;lotto-select&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p124.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hint: Combine the solutions of problems 1.22 and 1.23.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.25 (*) Generate a random permutation of the elements of a list.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p125.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:
?- rnd_permu([a,b,c,d,e,f],L).
L = [b,a,d,c,e,f]&lt;/p&gt;

&lt;p&gt;Hint: Use the solution of problem 1.23.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.26 (**) Generate the combinations of K distinct objects chosen from the N elements of a list&lt;/strong&gt;
In how many ways can a committee of 3 be chosen from a group of 12 people? We all know that there are C(12,3) = 220 possibilities (C(N,K) denotes the well-known binomial coefficients). For pure mathematicians, this result may be great. But we want to really generate all the possibilities (via backtracking).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p126.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:
?- combination(3,[a,b,c,d,e,f],L).
L = [a,b,c] ;
L = [a,b,d] ;
L = [a,b,e] ;
… &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.27 (**) Group the elements of a set into disjoint subsets.&lt;/strong&gt;
a) In how many ways can a group of 9 people work in 3 disjoint subgroups of 2, 3 and 4 persons? Write a predicate that generates all the possibilities via backtracking.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p127.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:
?- group3([aldo,beat,carla,david,evi,flip,gary,hugo,ida],G1,G2,G3).
G1 = [aldo,beat], G2 = [carla,david,evi], G3 = [flip,gary,hugo,ida]
…&lt;/p&gt;

&lt;p&gt;b) Generalize the above predicate in a way that we can specify a list of group sizes and the predicate will return a list of groups.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p127.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:
?- group([aldo,beat,carla,david,evi,flip,gary,hugo,ida],[2,2,5],Gs).
Gs = [[aldo,beat],[carla,david],[evi,flip,gary,hugo,ida]]
…&lt;/p&gt;

&lt;p&gt;Note that we do not want permutations of the group members; i.e. [[aldo,beat],…] is the same solution as [[beat,aldo],…]. However, we make a difference between [[aldo,beat],[carla,david],…] and [[carla,david],[aldo,beat],…].&lt;/p&gt;

&lt;p&gt;You may find more about this combinatorial problem in a good book on discrete mathematics under the term “multinomial coefficients”. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.28 (**) Sorting a list of lists according to length of sublists&lt;/strong&gt;
a) We suppose that a list (InList) contains elements that are lists themselves. The objective is to sort the elements of InList according to their length. E.g. short lists first, longer lists later, or vice versa.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p128.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:
?- lsort([[a,b,c],[d,e],[f,g,h],[d,e],[i,j,k,l],[m,n],[o]],L).
L = [[o], [d, e], [d, e], [m, n], [a, b, c], [f, g, h], [i, j, k, l]]&lt;/p&gt;

&lt;p&gt;b) Again, we suppose that a list (InList) contains elements that are lists themselves. But this time the objective is to sort the elements of InList according to their length frequency; i.e. in the default, where sorting is done ascendingly, lists with rare lengths are placed first, others with a more frequent length come later.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;compress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p128.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example:
?- lfsort([[a,b,c],[d,e],[f,g,h],[d,e],[i,j,k,l],[m,n],[o]],L).
L = [[i, j, k, l], [o], [a, b, c], [f, g, h], [d, e], [d, e], [m, n]]&lt;/p&gt;

&lt;p&gt;Note that in the above example, the first two lists in the result L have length 4 and 1, both lengths appear just once. The third and forth list have length 3; there are two list of this length. And finally, the last three lists have length 2. This is the most frequent length. &lt;/p&gt;

&lt;h2 id=&quot;arithmetic&quot;&gt;Arithmetic&lt;/h2&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;2.01 (**) Determine whether a given integer number is prime.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prime-p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CL-USER&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prime-p&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;NIL&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/bbatsov/cl-99-problems/blob/master/p201.lisp&quot;&gt;View solution&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Sieve of Eratosthenes is an algorithm for finding prime numbers,
that you might find helpful.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;logic-and-codes&quot;&gt;Logic and Codes&lt;/h2&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;binary-trees&quot;&gt;Binary Trees&lt;/h2&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;multiway-trees&quot;&gt;Multiway Trees&lt;/h2&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;graphs&quot;&gt;Graphs&lt;/h2&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;misc&quot;&gt;Misc&lt;/h2&gt;
&lt;hr /&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Ruby/Python/Programming/2011/05/03/ruby-or-python</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Ruby/Python/Programming/2011/05/03/ruby-or-python.html"/>
    <title>Ruby or Python? Well, it depends...</title>
    <updated>2011-05-03T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re looking for a flame post - this is not one of them. I love
both languages and I’ll simply compare some of their features and
possible uses.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ruby or Python? This is the Question! Well it might not be the
Question, but it’s a common question for many developers looking to
break free from the statically typed language they know and learn a
dynamic language. I personally know them both(though I know a bit more
Ruby, than Python) and in this article I’ll share my personal opinion
on their strengths and weaknesses. You’d probably do good to learn
them both, but my arguments here may lead you to pick only one of the
languages depending on you preferences.&lt;/p&gt;

&lt;h1 id=&quot;installation&quot;&gt;Installation&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Linux/Unix installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you’re using a Linux distribution or some other Unix derivative
such as *BSD or Solaris you’ll probably be able to install Ruby and
Python through the operating system’s software management system. For
instance on Debian Linux systems(Ubuntu is a popular Debian
derivative) you can use apt to install them. Run the following
commands as root or with sudo:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; apt-get install ruby
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; apt-get install python
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;On Red Hat based distros like Fedora, CentOS, etc you can use yum
instead:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum install ruby
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum install python
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You should keep in mind the fact that both Ruby and Python have two
version that are commonly used at the moment. Ruby’s current version
is &lt;em&gt;1.9.2&lt;/em&gt; and Python’s is &lt;em&gt;3.2&lt;/em&gt;. For various reasons(like backward
compatibility for instance), however, the current versions are not
widely deployed yet(especially Python 3). In most Linux distributions
the package ruby will actually be Ruby 1.8.x and the package python
will be Python 2.7.x. If your distribution is one of those - look for
packages named ruby19(or similar) and python3:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; apt-get install ruby19
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; apt-get install python3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;or on a Red Hat system:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum install ruby19
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum install python3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using the distribution package management system is a simple solution,
but in the case of Ruby it might not be best one. Most Ruby hackers
favour a powerful bash script called RVM(Ruby Version Manager) that
allows you to install several different version(or flavours of Ruby)
and switch easily between them. Please refer to the official
&lt;a href=&quot;https://rvm.beginrescueend.com/&quot;&gt;RVM documentation&lt;/a&gt; for installation
and usage instructions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Installing Ruby on Windows used to be a pretty hard task, but this is
no longer the case now thanks to
&lt;a href=&quot;http://rubyinstaller.org/&quot;&gt;the RubyInstaller for Windows&lt;/a&gt;. This is a
self-contained Windows-based installer that includes the Ruby
language, an execution environment, important documentation, and
more. It has two editions one for the older 1.8.x Ruby branch and one
for the current 1.9.x.&lt;/p&gt;

&lt;p&gt;Python has several installation options for Windows - the most obvious
being the
&lt;a href=&quot;http://python.org/ftp/python/3.2/python-3.2.msi&quot;&gt;official Python installer for Windows&lt;/a&gt;. &lt;a href=&quot;http://www.activestate.com/activepython&quot;&gt;ActiveState’s ActivePython&lt;/a&gt;
is another popular option packed with more features, but you should
keep in mind that although the Community Edition is free ActivePython
is not an open-source project. Personally I prefer ActivePython. Other
prebuilt Python binaries for Windows are also available, but are not
commonly used.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OS X installation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ruby is generally preinstalled on OSX, but OSX users can also install
it via &lt;a href=&quot;http://mxcl.github.com/homebrew/&quot;&gt;homebrew&lt;/a&gt; or RVM(as mentioned in the Linux section).&lt;/p&gt;

&lt;p&gt;The is an official &lt;a href=&quot;http://python.org/ftp/python/3.2/python-3.2-macosx10.6.dmg&quot;&gt;Python package for OSX&lt;/a&gt; available. Most users
will probably prefer using homebrew, however.&lt;/p&gt;

&lt;h1 id=&quot;syntax--code-structure&quot;&gt;Syntax &amp;amp; code structure&lt;/h1&gt;

&lt;p&gt;Ruby makes heavy use of braces and keywords(like do/then/end) to
delimit blocks of code. Python relies simply on indentation. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Same thing in Ruby:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I personally prefer the Python approach since it enforces the code
semantics based on the code structure alone without imposing special
syntax.&lt;/p&gt;

&lt;p&gt;As a side node you might take under consideration that the Ruby method
definition doesn’t have an explicit return value. The value of the
last expression in the method’s body becomes automatically the
method’s return value. Lisp developers will find this familiar. Java
and C# developers will probably find it a bit confusing. There is a
&lt;em&gt;return&lt;/em&gt; in Ruby, though, it’s just rarely used.&lt;/p&gt;

&lt;p&gt;Both languages have support for nested function definitions. &lt;/p&gt;

&lt;p&gt;Both languages have support for “top-level” functions - that live(or
seem to live) outside classes and modules(something not possible in
Java for instance). This makes them good for general purpose
scripting. While I would still prefer to do my system administration
with shell and Perl scripts - Ruby and Python offer a solid
alternative. Python has a richer system administration library so I’d
prefer it over Ruby for such tasks. &lt;/p&gt;

&lt;p&gt;Ruby has a lot of crust(“heritage”) from Perl - like a myriad of
special variables that are now more or less deprecated. It also has
much syntactic sugar - for instance do/end is commonly replaced by {}
for blocks that are only one line long, there is special syntax for
hashtables, whose keys are symbols, etc. &lt;/p&gt;

&lt;p&gt;Since special symbols(non alphanumeric) are allowed in Ruby
identifiers Ruby uses them to impose some naming conventions to make
the source code a bit more readable in certain scenarios - for
instance predicate methods(those that return true or false) have names
that end with ?(usually) like even?, odd?, prime?, etc. Methods that
mutate the object on which they were invoked generally have the !
suffix - sort!, map!, etc. I find this a nice decision. In Ruby you
generally have many ways to achieve the same result:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; 1.even?&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; false &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; arr = [1, 2, 3]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [1, 2, 3] &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; arr.map { |x| x * 2 }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [2, 4, 6] &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; arr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [1, 2, 3] &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; arr.map! { |x| x * 2 }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [2, 4, 6] &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; arr&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [2, 4, 6] &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; (1..5).reduce(:*)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; 120 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; (1..5).reduce { |x, y| x * y }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; 120 &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; (1..5).reduce do |x, y|&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt;     x * y&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 ?&amp;gt;  end&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; 120 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;No such things in Python, however. Python’s philosophy is one of
simplicity - no excessive syntax sugar, one true way of doing things.&lt;/p&gt;

&lt;p&gt;Both languages have powerful features for organising code in
libraries. I would not go into any details on the subject here, but
I’ll share with you the fact that I like Python’s more.&lt;/p&gt;

&lt;p&gt;Both languages come with a REPL in which you can do some exploratory
programming. Ruby’s REPL(irb)  allows you
to do TAB smart completion(amongst other things) by default. To get
TAB completion in the Python REPL you’d have to execute this bit of
code first:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rlcompleter&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_and_bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;tab: complete&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Alternative you can just stick this code snippet in the
&lt;strong&gt;~/.pythonrc.py&lt;/strong&gt; file(create it if it doesn’t exist). If you are using
Windows adjust accordingly(you will have to figure out where
pythonrc.py is located there).&lt;/p&gt;

&lt;p&gt;Ruby does not have statements - only expressions. This
basically means that everything(objects, method calls) evaluate to
some value(though the value might not be helpful always). &lt;/p&gt;

&lt;p&gt;In Python there are some statements such as assignment and &lt;em&gt;if&lt;/em&gt;. One
thing I dislike about the Python REPL is that it doesn’t print None
values. Compare this bit of Python code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;this is a test&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;this is a test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;to this Ruby snippet:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; puts &amp;quot;this is a test&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;this is a test&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; nil &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the Python version we see only the side-effect(the printing), but
not the return value.&lt;/p&gt;

&lt;p&gt;Python also ships with a minimalistic IDE called IDLE. If you don’t
have it by default after a python installation on Linux probably
you’re vendor decided to package IDLE as a separate package. IDLE
offers basic features like syntax highlighting, code completion and
integration with a debugger. It’s a good tool for exploratory
programming, but I advise you to pick another tool for serious development.&lt;/p&gt;

&lt;h1 id=&quot;naming-conventions&quot;&gt;Naming conventions&lt;/h1&gt;
&lt;p&gt;The naming conventions for both Ruby and Python are mostly the same
which is good if you’re using them both on a daily basis - less room
for confusion.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;variable and method names consisting of more then one word are
written in lowercase with underscores separating the individual
words like_this.&lt;/li&gt;
  &lt;li&gt;Class names start with capital letter and follow the camel case
naming convention LikeThis. Some of Python’s core classes, however,
violate this convention.&lt;/li&gt;
  &lt;li&gt;Constants are generally written in all caps with underscores
separating the individual words LIKE_THIS.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As I mentioned earlier it’s customary to add ? as a suffix to
predicate methods and ! to mutator methods in Ruby. This convention is
not always followed unfortunately, even in Ruby’s standard library.&lt;/p&gt;

&lt;h1 id=&quot;oop-support&quot;&gt;OOP support&lt;/h1&gt;
&lt;p&gt;Both Ruby and Python are famous members of the family of object
oriented languages. Unlike languages such as Java and C#, however,
Ruby and Python are pure OOP languages. There is no distinction
between primitive types(such as numbers, characters and booleans) and
reference types(classes). Everything in them is an object and in that
sense it’s an instance of some class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;type &amp;#39;int&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;type &amp;#39;str&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;20.07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;type &amp;#39;float&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;type &amp;#39;list&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;&amp;lt;type &amp;#39;tuple&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And in Ruby:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; 10.class&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; Fixnum &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; &amp;quot;string&amp;quot;.class&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; String &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; [].class&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; Array &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see core Ruby classes tend to have a bit more standard and
descriptive names than their Python counterparts. You can also notice
that in Python for some task we use built-in functions like type,
instead of method calls. The built-in function will eventually result
in a method invocation(like “string”.&lt;strong&gt;class&lt;/strong&gt; in the case of
type(“string”)), but I find this irregularity in the syntax a bit
irritating.&lt;/p&gt;

&lt;p&gt;Method invocation is more flexible in Ruby - you can omit braces in
some scenarios. This is handy when you’re designing a DSL or you’re
trying to implement the uniform access patterns(data should be
accessed through fields and methods in the same manner(read this as
with no braces in method invocations)). On the other hand Python’s
uniform syntax makes it easier to spot method invocations. &lt;/p&gt;

&lt;p&gt;Both languages don’t have operators - just methods. Ruby’s OO support
seems to be a bit more mature and polished(at least to me), but
Python’s has some touches as well. I particularly like the explicit
self references that are required when you try to access class
members. I’m not too found of the use of special sigils in Ruby to
mark instance(@) and class members(@@). Though they make them visually
distinctive I think we could have lived without them - I’m generally
not a fan of non-uniform syntax rules(and you guessed it - my
favourite language is Lisp).&lt;/p&gt;

&lt;p&gt;Ruby’s metaprogramming model arguably gives it an edge in the OOP
department, but I won’t be discussing the metaprogramming issues here
since they are quite lengthy.&lt;/p&gt;

&lt;h1 id=&quot;functional-programming-support&quot;&gt;Functional programming support&lt;/h1&gt;

&lt;p&gt;Functional programming has been on the rise lately and it’s useful to
examine what kind of support both languages provide for it. Both have
support for lambda functions and respectively - higher-order
functions(functions that accept functions as parameters). Ruby has
code blocks, Python has list comprehensions(generally favoured over
higher-order functions). Both languages lack in their standard libs
the immutable data structures that generally are the code of most
functional programming languages. Here’s a few example related to
filtering a sequence based on some predicate:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;pycon&quot;&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[2, 4, 6, 8, 10]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ruby:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;irb&quot;&gt;&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; (1..10).select { |x| x.even? }&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [2, 4, 6, 8, 10] &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;ruby-1.9.2-p0 &amp;gt; (1..10).select &amp;amp;:even?&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; =&amp;gt; [2, 4, 6, 8, 10] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ruby’s functional programming support seems to be better to me, but
this is of course subjective.&lt;/p&gt;

&lt;h1 id=&quot;gui-programming&quot;&gt;GUI programming&lt;/h1&gt;

&lt;p&gt;Python has tkinker by default - a wrapper around the Tk library(which
sucks in my humble opinion). Ruby doesn’t have even this much. Both
have binding for the popular GUI toolkits such wxwidgets, GTK,
QT. From my experimentation with them I can tell you that you’ll be
much better off with Python in that department. It’s not wonder that
many GTK+ applications these days are implemented in Python. Most Ruby
bindings projects seem to be in a state of disarray, abandonment - I
guess we have to thank Rails for that. Most people think of Rails as
the only use of Ruby which is sad…&lt;/p&gt;

&lt;p&gt;Ruby devs shouldn’t despair however. JRuby(Ruby’s port to the JVM) has
an excellent support for the superb Swing GUI framework and MacRuby
has great support for building Cocoa Apps for OS X. I personally think
that JRuby is the best Ruby distribution out there, but that’s the
point of another post entirely.&lt;/p&gt;

&lt;h1 id=&quot;rd-party-library-availability-and-installation&quot;&gt;3rd party library availability and installation&lt;/h1&gt;

&lt;p&gt;It’s not secret that part of Python’s philosophy is that it comes with
batteries included - meaning that it’s standard library is vast and
covers a lot of common tasks. In case you can’t find what you’re
looking for in it you’re left with an number of third party libraries
for Python whose number can only be described by the word epic and
that cover every task conceivable. &lt;a href=&quot;http://pypi.python.org/pypi&quot;&gt;PyPi&lt;/a&gt;
maintains an up-to-date list of Python packages.&lt;/p&gt;

&lt;p&gt;You have several options in the department of python package
management. If you’re using ActivePython you can use the excellent
&lt;a href=&quot;http://code.activestate.com/pypm/&quot;&gt;PyPM&lt;/a&gt; tool, which provides quick
installation of thousands of packages for many Python versions and
platforms for ActivePython distributions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://peak.telecommunity.com/DevCenter/EasyInstall&quot;&gt;EasyInstall&lt;/a&gt; is another popular solution that works with the standard
Python distribution. Like PyPM it allows you easily search for and
install Python packages from the PyPI that are bundled in Python’s
standard egg format(Jave developers might think of eggs as
jars). EasyInstall has splendid documentation so I won’t go into any
details here.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.pip-installer.org/en/latest/index.html&quot;&gt;pip&lt;/a&gt; is a
replacement for easy_install. It uses mostly the same techniques for
finding packages, so packages that were made easy_installable should
be pip-installable as well.&lt;/p&gt;

&lt;p&gt;pip is meant to improve on EasyInstall. Some of the improvements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;All packages are downloaded before installation. Partially-completed installation doesn’t occur as a result.&lt;/li&gt;
  &lt;li&gt;Care is taken to present useful output on the console.&lt;/li&gt;
  &lt;li&gt;The reasons for actions are kept track of. For instance, if a package is being installed, pip keeps track of why that package was required.&lt;/li&gt;
  &lt;li&gt;Error messages should be useful.&lt;/li&gt;
  &lt;li&gt;The code is relatively concise and cohesive, making it easier to use programmatically.&lt;/li&gt;
  &lt;li&gt;Packages don’t have to be installed as egg archives, they can be installed flat (while keeping the egg metadata).&lt;/li&gt;
  &lt;li&gt;Native support for other version control systems (Git, Mercurial and Bazaar)&lt;/li&gt;
  &lt;li&gt;Uninstallation of packages.&lt;/li&gt;
  &lt;li&gt;Simple to define fixed sets of requirements and reliably reproduce a set of packages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;pip doesn’t do everything that easy_install does. Specifically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It cannot install from eggs. It only installs from source. (In the future it would be good if it could install binaries from Windows .exe or .msi – binary install on other platforms is not a priority.)&lt;/li&gt;
  &lt;li&gt;It doesn’t understand Setuptools extras (like package[test]). This should be added eventually.&lt;/li&gt;
  &lt;li&gt;It is incompatible with some packages that extensively customize distutils or setuptools in their setup.py files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux users will also find a great selection of Python libraries
prepackaged for use with the distribution’s package manager.&lt;/p&gt;

&lt;p&gt;Ruby has an application that is more or less equivalent to EasyInstall
called &lt;a href=&quot;http://rubygems.org/&quot;&gt;RubyGems&lt;/a&gt;(gems are the standard way to distribute Ruby
libraries). Linux users can of course install Ruby libraries with the
distribution’s package manager as well. &lt;/p&gt;

&lt;p&gt;RubyGems has the following features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Easy Installation and removal of RubyGems packages and their dependents.&lt;/li&gt;
  &lt;li&gt;Management and control of local packages&lt;/li&gt;
  &lt;li&gt;Package dependency management&lt;/li&gt;
  &lt;li&gt;Query, search and list local and remote packages&lt;/li&gt;
  &lt;li&gt;Multiple version support for installed packages&lt;/li&gt;
  &lt;li&gt;Web-based interface to view the documentation for your installed gems&lt;/li&gt;
  &lt;li&gt;Easy to use interface for building gem packages&lt;/li&gt;
  &lt;li&gt;Simple server for distributing your own gem packages&lt;/li&gt;
  &lt;li&gt;Easy to use building and publishing of gem packages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using RubyGems, you can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;download and install Ruby libraries easily&lt;/li&gt;
  &lt;li&gt;not worry about libraries A and B depending on different versions of library C&lt;/li&gt;
  &lt;li&gt;easily remove libraries you no longer use&lt;/li&gt;
  &lt;li&gt;have power and control over your Ruby platform! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A reader pointed out that about 23000 packages are available for
installation through RubyGems and 15000 through PyPI. This, however,
cannot be considered as a certain sign that there are more libraries
available for Ruby than for Python.&lt;/p&gt;

&lt;p&gt;Although tools like EasyInstall and RubyGems are easy to use and quite
handy, I as a long-time Linux users dislike them a bit, since they
circumvent the distributions native package handling. Unfortunately
package maintainers cannot find the time to package every Python and
Ruby library available so I guess EasyInstall and RubyGems won’t be
going anywhere soon and of course we have to consider Windows users
for whom such applications are of great value given the lack of
unified package management on Windows.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind about installing eggs and gems is that some
of them are implemented in C(usually for performance reasons) and are
locally built prior to their installation - an operation bound to fail
if you don’t have a C compiler installed.&lt;/p&gt;

&lt;h1 id=&quot;misc&quot;&gt;Misc&lt;/h1&gt;

&lt;p&gt;In terms of performance of the default interpreters CPython and MRI
Ruby Python is the clear winner. One should note, however, is that there
are many how quality implementation of Ruby and Python for different
platforms where the performance situation differs wildly. For instance
Jython is much slower that JRuby. With the addition of invoke_dynamic
in JDK7(basically bytecode level support for dynamic method dispatch)
the performance of JRuby and Jython could potentially be improved
greatly.&lt;/p&gt;

&lt;p&gt;In terms of overall usage, market share, job offers and sheer size of
the community and available libraries Python is ahead of Ruby as
well. One of the main supporters of Python is after all none other
than the mighty Google. Ruby has also the unfortunate luck to be
living in the shadow of a single application written in Ruby - Ruby on
Rails, that is arguably more popular than the language itself.&lt;/p&gt;

&lt;p&gt;Tooling for dynamic languages is currently not as advance as the one
for static languages. People often joke that Python(Ruby) &amp;gt; Java(C#),
but Python + any python IDE &amp;lt; Java + IntelliJ
IDEA(Eclipse/NetBeans). Python and Ruby IDEs seem to be mostly on par
currently. I do all of my Ruby and Python coding in Emacs, but I do
like RubyMine and PyCharm. &lt;/p&gt;

&lt;p&gt;Since they are often used for the creation of webapps one should
consider the deployment issue. Most web hosting companies provide
cheap Python hosting, but very few companies provide Ruby hosting.&lt;/p&gt;

&lt;h1 id=&quot;the-python-3-problem&quot;&gt;The Python 3 problem&lt;/h1&gt;

&lt;p&gt;Python 3 was a great undertaking that improved on a lot of aspects of
the language(for example Unicode support) and the standard library. To
do this it dropped backward compatibility, an act that slowed it’s
adoption immensely. Three years have passed since it’s release and
still most hosting providers, Linux distros and Python projects hold
on to the older 2.7.x Python branch.&lt;/p&gt;

&lt;p&gt;This is a bit of tragedy since Python 3 is truly a great improvement
over Python 2. I mention this because most recent books are written
with Python 3 in mind, but if you land a Python jobs somewhere chances
are you’ll have to use Python 2.x.x for the foreseeable future.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Ruby and Python are two beautifully engineered languages capable of
just about everything. If you don’t know any of them you’ll do well to
learn at least one. If you know only one it might not be a terrible
idea to learn the other.&lt;/p&gt;

&lt;p&gt;I haven’t touched on many language features(like Python generators and
Ruby mixins), but to be honest I’m just tired of typing. One good
place to start your journey to Python is
&lt;a href=&quot;http://diveintopython3.org/&quot;&gt;“Dive into Python 3”&lt;/a&gt;. For Ruby
beginners I’d recommend a copy of
&lt;a href=&quot;http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177&quot;&gt;“The Ruby Programming Language”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. If you like exploring different programming languages and you’re
currently shopping for ideas on the subject of which language to learn
next you might find my recent article
&lt;a href=&quot;/Programming/2011/04/27/programming-languages-worth-learning.html&quot;&gt;“Programming languages worth learning”&lt;/a&gt;
interesting as well.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Programming/Common Lisp/2011/04/30/parsing-numbers-from-string-in-lisp</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Programming/Common Lisp/2011/04/30/parsing-numbers-from-string-in-lisp.html"/>
    <title>Parsing numbers from string in Common Lisp</title>
    <updated>2011-04-30T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;One task that often recurs in programming is the need to parse a
string representation a number(or several numbers) and convert it to
its numeric value. Parsing integer value in Common Lisp is fairly
straightforward process - we have the built-in function &lt;strong&gt;PARSE-INTEGER&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parse-integer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; 100&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parse-integer&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;100&amp;quot;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:radix&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see the function allows you to parse a string
representation of a number in an arbitrary base system(the default is
the &lt;em&gt;decimal&lt;/em&gt;). With the keyword argument &lt;strong&gt;:radix&lt;/strong&gt; you can specify a
base in the interval 2-36. The function has a few other fancy
capabilities as well - like the ability to process only a part of the
string that has been passed to it and to ignore junk in the input
string. For all the gory details refer to the
&lt;a href=&quot;http://www.lispworks.com/documentation/HyperSpec/Body/f_parse_.htm&quot;&gt;Lisp HyperSpec&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The problem that most Lisper face soon after is that there is no
matching function PARSE-FLOAT or PARSE-DOUBLE. I’m not sure what
technical reason is hidden beneath this design decision, but I know of
simple way to parse floating point numbers non-the-less. It’s built
around the &lt;strong&gt;READ&lt;/strong&gt;(The R in REPL) function that allows you read any
S-expression from a string form. The READ function then returns a Lisp
object corresponding to the S-expression read. With that knowledge and
the fact that READ accepts as an optional argument an input stream
from which to read that S-expression(the default is the the standard
input) we can write the following bit of parsing code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-input-from-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;3.14&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here we created an input stream that’s bound to the string “3.14” and
read one S-expression from it - the floating point object 3.14.&lt;/p&gt;

&lt;p&gt;We can even build a more general solution that parses several numbers
in a string, regardless of their actual type(integer or floating
point):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;with-input-from-string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;3.14 5.646 4 9.6&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;;; =&amp;gt; (3.14 5.646 4 9.6)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hopefully this short article has been helpful. You’ve also witnessed
one of the practical benefits of having the code in Lisp represented
as data.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Z Shell/2011/04/29/one-shell-to-rule-them-all</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Z Shell/2011/04/29/one-shell-to-rule-them-all.html"/>
    <title>One shell to rule them all...</title>
    <updated>2011-04-29T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I’ve been using zsh for about three years now and continue to be
impressed the its immense power and flexibility. Switching from bash
to zsh was a decision as good as switching from Windows to GNU/Linux,
from vim to Emacs, from Eclipse to IntelliJ IDEA. In other words - it
was an extremely good decision. :-)&lt;/p&gt;

&lt;p&gt;So I want to finally get the word out, showcase some nice zsh features
and probably persuade a couple of bash users to try it. Be warned,
however - after you try it there is no going back…&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;Most distros come with bash by default so you’ll probably need to
install zsh first and configure it as your user’s shell. On Fedora
you’d do:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[bozhidar@bozhidar ~]$ sudo yum install zsh&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The edit /etc/password and set there zsh as your shell:&lt;/p&gt;

&lt;p&gt;bozhidar:x:500:500:Bozhidar Batsov:/home/bozhidar:/bin/zsh&lt;/p&gt;

&lt;p&gt;The next time you login a terminal wizard with start up asking you
about some basic zsh options that you might want to enable. I suggest
you to enable them all except the beep option. In the end the wizard
will save the new configuration to the file .zshrc in your user’s home
folder.&lt;/p&gt;

&lt;p&gt;Alternatively you may just use a preconfigured .zshrc, like this one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Lines configured by zsh-newuser-install&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HISTFILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.histfile
&lt;span class=&quot;nv&quot;&gt;HISTSIZE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000
&lt;span class=&quot;nv&quot;&gt;SAVEHIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1000
setopt appendhistory autocd extendedglob nomatch notify correct_all
unsetopt beep
bindkey -e
&lt;span class=&quot;c&quot;&gt;# End of lines configured by zsh-newuser-install&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following lines were added by compinstall&lt;/span&gt;
zstyle :compinstall filename &lt;span class=&quot;s1&quot;&gt;&amp;#39;/home/bozhidar/.zshrc&amp;#39;&lt;/span&gt;

autoload -Uz compinit
compinit
&lt;span class=&quot;c&quot;&gt;# End of lines added by compinstall&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I don’t like very much the default zsh prompt and I generally change
it right away. Have a look at my other
&lt;a href=&quot;/Z%20Shell/Linux/2008/07/27/zsh-prompt.html&quot;&gt;short article&lt;/a&gt; on the topic.&lt;/p&gt;

&lt;p&gt;There a couple of configuration files related to zsh that you should
know about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.zshrc - runs for each new shell(roughly equivalent to .bashrc)&lt;/li&gt;
  &lt;li&gt;.zprofile - runs only for login shells(like .bash_profile)&lt;/li&gt;
  &lt;li&gt;.zlogout - runs on logout&lt;/li&gt;
  &lt;li&gt;.zshenv - holds environmental variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s an example .zshenv file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/java/latest

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SCALA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/scala-2.8.1.final

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;M2_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/apache-maven-3.0.2

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EDITOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;emacsclient -t&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ALTERNATE_EDITOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#needed to properly display complex color-themes in Emacs and vim&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TERM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xterm-256color

&lt;span class=&quot;nb&quot;&gt;typeset&lt;/span&gt; -U path
&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$M2_HOME&lt;/span&gt;/bin &lt;span class=&quot;nv&quot;&gt;$SCALA_HOME&lt;/span&gt;/bin ~/bin ~/Projects/work/bin &lt;span class=&quot;nv&quot;&gt;$path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Please note the way in which the PATH variable is set in zsh, which
differs substantially from bash(it’s just exported there as any other variable).&lt;/p&gt;

&lt;h2 id=&quot;playing-around&quot;&gt;Playing around&lt;/h2&gt;

&lt;p&gt;At this point you have the legendary zsh autocompletion configured and
you have enabled many of the zsh core features.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;autocd&lt;/strong&gt; allows you to navigate to folders only with their name
without the cd command. One of my favourite features. Now you can do
things like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;  &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[bozhidar@bozhidar ~]$ Downloads   &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[bozhidar@bozhidar ~/Downloads]$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Instead of:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[bozhidar@bozhidar ~]$ cd Downloads   &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;[bozhidar@bozhidar ~/Downloads]$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By the way autocd was added in bash 4.0 as well. You can enable it there with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[bozhidar@bozhidar ~]$ shopt -s autocd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;appendhistory&lt;/strong&gt; all your open shells share the same history which is
handy if you want to refer commands from one shell in another with
say Ctrl+R(reverse-history-search)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;extendedglob&lt;/strong&gt; allows you to recursive look for files in folders:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[bozhidar@bozhidar ~]$ ls somedir/**/Makefile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;is equivalent to:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[bozhidar@bozhidar ~]$ find somedir -name Makefile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Most zsh users never use find for simple file look up. This feature
was also added to bash 4.0 but it works in a slightly different
manner.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shopt&lt;/span&gt; -s extglob
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;correct&lt;/strong&gt; - autocorrects mistyped commands&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[bozhidar@bozhidar]$ cta ~/.zshrc &lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;zsh: correct &amp;#39;cta&amp;#39; to &amp;#39;cat&amp;#39; [nyae]?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;keybindings&quot;&gt;Keybindings&lt;/h1&gt;

&lt;p&gt;By default zsh uses Emacs keybindings which is perfect for a long time
Emacs user like me. zsh doesn’t use readline, instead it has its own
line editing library called zle, which is much more powerful. vi users
are not forgotten and can switch zsh to vi keybindings with the
command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;bindkey -v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Mind that by default you’ll be in “insert” mode and have to press ESC
to go into command mode.&lt;/p&gt;

&lt;p&gt;You can also create custom keybindings like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;bindkey &amp;#39;^[[H&amp;#39; beginning-of-line&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;bindkey &amp;#39;^[[F&amp;#39; end-of-line&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will bind the Home and End keys to the commands beginning-of-line and end-of-line.
# Aliases&lt;/p&gt;

&lt;p&gt;Zsh has three different kinds of shell aliases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regular&lt;/strong&gt; - same as in bash:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;alias ll=&amp;#39;ls -l&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Suffix&lt;/strong&gt; - suffix aliases are supported in zsh since version
4.2.0. Some examples:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;alias -s tex=emacs&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;alias -s html=google-chrome&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now when you type in the console&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; somefile.tex
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;it will be opened automatically with Emacs. Similarly somefile.html
would be opened by google-chrome. As you might imagine this feature is
quite handy.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Global&lt;/strong&gt; - global aliases can be used anywhere in the command line(as
opposed to regular aliases that can used only in the beginning). Example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;alias -g ...=&amp;#39;../..&amp;#39;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;cd ...  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;some-tips-and-tricks&quot;&gt;Some tips and tricks&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;press Alt+q in the middle of a command you’re typing. This will clear 
the console prompt and allow you execute another command(like a man lookup). Afterwards 
the things you’ve typed before the Alt+q will magically reappear.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Imagine you’re in the folder &lt;strong&gt;project/4.0/module&lt;/strong&gt;. Typing:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;cd 4.0 5.0 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Will take you to a folder named project/5.0/module(assuming that it exists of course). In general
the command has the format &lt;code&gt;cd old new&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;zsh comes with a built-in pager(similar to less). To try it just type &amp;lt;somefilename. This is 
more or less equivalent to typing &lt;code&gt;less somefilename&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;There is no easy way to sum up everything that makes zsh great in a single blog post. I’ll try to
expand and improve it in time. I hope I’ve whetted your appetite to try out zsh. If you like it
well enough(of which I’m most certain you should have a look at the resources in the end as well).&lt;/p&gt;

&lt;h1 id=&quot;useful-resources&quot;&gt;Useful resources&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bash2zsh.com/zsh_refcard/refcard.pdf&quot;&gt;zsh reference card&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zsh.sourceforge.net/Doc/zsh_a4.pdf&quot;&gt;zsh manual&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zsh.sourceforge.net/Guide/zshguide.html&quot;&gt;“A User’s Guide to Z-Shell”&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://zshwiki.org/home/&quot;&gt;zsh wiki&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://grml.org/zsh/zsh-lovers.html&quot;&gt;zsh lovers&lt;/a&gt; - collection of
tips and tricks&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.bash2zsh.com/&quot;&gt;“From Bash to Z Shell - Conquering the Command Line”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Misc/2011/04/29/career-development</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Misc/2011/04/29/career-development.html"/>
    <title>Career development - Should I stay or should I go?</title>
    <updated>2011-04-29T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I guess nothing describes more appropriately the essence of career
development than the famous song by &lt;a href=&quot;http://www.youtube.com/watch?v=V1Gn0e7kvTA&quot;&gt;The Clash&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We generally have two options in front of us when we consider our
careers - stay at our current company and hope to advance in it or
jump ship to a new hopefully better job in another company. Both have
their pros and cons which I’ll shortly discuss. Mind, though, that I’m
no HR specialist or a pro career adviser so you’d do well not to rely
on my writing a 100%. Also everything I’ll write comes from my own
experience as professional software engineer. I guess some of my
advice will not apply to other careers.&lt;/p&gt;

&lt;h1 id=&quot;stay-at-my-current-company&quot;&gt;Stay at my current company&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt; - &lt;em&gt;there are some
companies that are so great that no one wants to leave them. This
section is not about them. This is about the companies we all know and
have grown accustomed to tolerate - the ones with the mostly same
work, lying bosses and a lot of empty promises.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The idea is basic. You’ve spent some time in the company, you’re
hoping that in time with hard work and dedication you’ll rise in the
company ranks and you’ll get a healthy salary increase in the process.&lt;/p&gt;

&lt;p&gt;Unfortunately this doesn’t happen quite often. Most companies have
some internal salary limits and some next to irreplaceable
people. This means that there is a cap at your growth there. Sure, if
you stay with the company long enough - say 10 years, probably some of
the irreplaceable people will be replaced, but is worth the wait?&lt;/p&gt;

&lt;p&gt;When you sit around just doing the same things you tend to get bored
and demotivated at times. You become less productive and less
interested in your work in general. You just go to work, stay there
for 8 hours and go home. The paycheck is the only thing of interest
to you and you become duller and duller by the day.&lt;/p&gt;

&lt;p&gt;This is what I call “flowing down the current”. One of my former bosses used
to say that when you start feeling you’re flowing down the current you
should immediately start looking for another job(that is unless you’re
one of the those people that just like to complain how they hate their
job, but actually doesn’t mind to sit around doing nothing and get
paid for it). My boss also used to say that one shouldn’t spend more
than 3 or 4 years in a company he doesn’t own.&lt;/p&gt;

&lt;p&gt;Of course you shouldn’t jump between jobs every 6 or so months because
this will make you a blacklisted candidate by most HRs - after all
they’re looking most of the time for people ready to commit to their
cause for at least a few years.&lt;/p&gt;

&lt;p&gt;Pros of staying:
* you know the game and how to play it
* you’re accustomed to colleagues, the office and you don’t have to
  change them
* you’ve got a guaranteed paycheck that is unlikely to evaporate
* if the company is bigger(100+) you’ve got a fair chance to advance
  in the company hierarchy if you’re willing to stay long enough&lt;/p&gt;

&lt;p&gt;Cons of staying:
* you limit your professional development
* you limit the possibilities for salary improvements&lt;/p&gt;

&lt;p&gt;In the end it seems to me that most people are not too fond of taking
chances(me included). This is the reason that a lot of average
companies have employees that could do a lot better somewhere
else. This is partly caused by our very own society - the people and
media around us keep telling us that we’re mostly the same, that it’s
unlikely we’ll ever achieve something great, something
monumental… and many of us do believe them. &lt;/p&gt;

&lt;p&gt;Hristo Stoichkov might not be the all time greatest philosopher, but
said something extremely important once(or twice) - “If you don’t play
you can’t win”(in Bulgarian - “Който не играе не печели.”).&lt;/p&gt;

&lt;h1 id=&quot;move-to-another-company&quot;&gt;Move to another company&lt;/h1&gt;

&lt;p&gt;Moving to another company is not a silver bullet. Most of the time it
guarantees you a higher salary(the top reason why people switch
jobs), but it doesn’t certainly mean you’ll have a more interesting
and fulfilling work. This is especially true if you go to work for
some huge corporation and you’re not part of its Research&amp;amp;Development
department. I generally avoid such job offers. Corporations offer some
measure of security, but little if any excitement.&lt;/p&gt;

&lt;p&gt;I think that most people should try to find employment in companies
that are start-ups or that regularly start to work on new
projects. There one has plenty of opportunities to prove himself and
to advance in the company along the way. Of course such companies have
the nasty habit of going down under from time to time so you have to
think long and hard before joining one if you’re living under rent or
have to pay down-payments on two mortgages. Of course if you’re good
enough at your job - you’ll find a new one soon enough and that shouldn’t
really be bothering you.&lt;/p&gt;

&lt;p&gt;Pros of moving:
* moving to a new company is likely to represent a raise in your
  salary you’ll have to wait several years to get with your current
  employer
* there is a strong possibility that your new work will be more
  exciting than your old one(after all you’ve tried to pick a more
  exciting job, right?)
* you might get to meet some interesting new people, learn from them
  and improve your professional skills&lt;/p&gt;

&lt;p&gt;Cons of moving:
* you have to prove your worth again(you’ve already did this in your
  old job)
* the is the factor of uncertainty every time you start something new
* you’ll have to learn how to work and deal with your new colleagues
* you might get more of the same work that made you leave in the first
  place in case you have not chosen carefully your new employer.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;Topics such a career development are highly subjective and depend on a
myriad of factors. My musings here are inspired by my 7 year long
career as a software engineer that spanned over four employers and
will probably soon include a fifth. This is not a lot of data to
consider, but I can assure you that the traits that I describe are
most real and are here to stay.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Programming/2011/04/27/programming-languages-worth-learning</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Programming/2011/04/27/programming-languages-worth-learning.html"/>
    <title>Programming languages worth learning</title>
    <updated>2011-04-27T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Programming languages have always been a passion of mine and through
the years I’ve learnt quite a few of them. The first one was Pascal,
some 13 years ago, and the last was Scala, just a couple of months ago.&lt;/p&gt;

&lt;p&gt;Although the authors of many languages claim that the language they
created is the greatest thing after hot water, this is rarely the
case. Most of the “unique” features are not quite unique, and the truly
unique stuff is often just useless. I don’t believe that there is a
single greatest and unparallelled language, but I do believe that some
languages are more valuable them others in term of both theory(the
concepts around which they revolve) and practice(the chances of you
landing a job with them or simply getting a task done).&lt;/p&gt;

&lt;p&gt;In this blog post I’ll review the ten or so languages that I’ve found to
be most enlightening/helpful for me over the years. I think that every
professional software engineer should have at least a passing
knowledge of them.&lt;/p&gt;

&lt;h1 id=&quot;c&quot;&gt;C&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;The C programming language has been around for about forty
years now (it appeared in 1973). While it’s often viewed as a higher
level assembly language today in the era of Java, .Net and Python, C
remains the sole choice for doing serious system programming - writing
drivers, all kinds of servers and virtual machines.&lt;/p&gt;

&lt;p&gt;Learning C also give you an insight to the inner working of the
computer, like memory management and native data types (based on a CPU’s
registries).&lt;/p&gt;

&lt;p&gt;The best way to get started with C
hasn’t changed in the past 20+ years - just pick a copy of &lt;a href=&quot;http://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628&quot;&gt;“The C
Programming Language”&lt;/a&gt; by K&amp;amp;R.&lt;/p&gt;

&lt;h1 id=&quot;lisp&quot;&gt;Lisp&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;“Lisp is worth learning for the profound enlightenment
experience you will have when you finally get it; that experience will
make you a better programmer for the rest of your days, even if you
never actually use Lisp itself a lot.”&lt;/em&gt; - Eric Raymond&lt;/p&gt;

&lt;p&gt;One of the oldest programming languages around - created in 1958 and
still relevant today. Important for its unique code is data approach,
advanced code generation facilities (macros) and the ability to develop
software in incremental and interactive fashion. &lt;/p&gt;

&lt;p&gt;Although many of the features that originally made it truly
unique (like garbage collection, if expression, function objects) are
now found in many modern languages, Lisp still offers some compelling
alternatives for those interested to explore it.&lt;/p&gt;

&lt;p&gt;These days Common Lisp is considered the canonical Lisp dialect - a
multi-paradigm language with excellent support for imperative,
functional and object-oriented programming. Another popular dialect is
Scheme which is a simpler language focused mainly on functional
programming and until recently was a popular choice for teaching
introductory programming classes in many major US
universities (recently it’s being displaced by Python). &lt;/p&gt;

&lt;p&gt;You cannot start with a better introduction to Common Lisp than Peter
Seibel’s
&lt;a href=&quot;http://www.gigamonkeys.com/book/&quot;&gt;“Practical Common Lisp”&lt;/a&gt;. If you
fancy Scheme more take a look at the classic text
&lt;a href=&quot;http://mitpress.mit.edu/sicp/full-text/book/book.html&quot;&gt;“Structure and Interpretation of Computer Programs”&lt;/a&gt;. A
good source of exercises for aspiring Lisp programmers are the
&lt;a href=&quot;/Misc/Common%20Lisp/2011/05/04/lisp-problems.html&quot;&gt;“Lisp Problems”&lt;/a&gt;(a work in progress based on the original “Prolog Problems”).&lt;/p&gt;

&lt;h1 id=&quot;java&quot;&gt;Java&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;Let’s face it - if you’re in the market for jobs a third of them are
about Java EE or Android development (the other two thirds are probably
related to PHP and .NET). The language is not quite
elegant, but the platform is truly magnificent. Although there are
many other languages targeting the JVM (Scala, Groovy, Clojure, JRuby,
Jython - just to name a few) Java is still predominant by a wide
margin and this is unlikely to change soon. It’s actually &lt;a href=&quot;http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html&quot;&gt;the most
popular programming language in the world&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve taught a couple of introductory Java programming courses (in
Bulgarian), but I’d recommend the
&lt;a href=&quot;http://www.amazon.com/Core-Java-TM-I--Fundamentals-8th/dp/0132354764/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1303901341&amp;amp;sr=1-1&quot;&gt;“Core Java”&lt;/a&gt;
book over my lectures any day of
the week. :-)&lt;/p&gt;

&lt;h1 id=&quot;haskell&quot;&gt;Haskell&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;Functional programming has been gaining popularity in recent years
with the rise of parallel computers, and of the pure functional
programming languages Haskell is probably the closest to the
mainstream. It features great ideas like type inference, lazy
evaluation, monads, pattern matching. As with Lisp many of the
features of Haskell can be found in more impure packages(like Scala
and Clojure), but Haskell is still the top pure functional language in
my humble opinion. &lt;/p&gt;

&lt;p&gt;There are great free Haskell learning resources
on-line like &lt;a href=&quot;http://learnyouahaskell.com/&quot;&gt;“Learn you a Haskell for great good”&lt;/a&gt; and &lt;a href=&quot;http://book.realworldhaskell.org/read/&quot;&gt;“Real world
Haskell”&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;perl&quot;&gt;Perl&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;Once the undisputed king of the Internet Perl has recently fallen down
from grace in its battle with the newer generation of dynamic
languages like PHP, Ruby and Python. While I wouldn’t advise anyone to
start writing Web or Enterprise apps with Perl it’s still the best language for
writing administration and helper scripts with minimum fuss and maximum
developer throughput. It features the greatest support for text
processing ever and an extremely flexible (albeit a bit of confusing)
syntax. &lt;/p&gt;

&lt;p&gt;Perl &lt;a href=&quot;http://www.cpan.org/&quot;&gt;CPAN&lt;/a&gt; is probably the largest collection of third party
libraries for a single language ever assembled.&lt;/p&gt;

&lt;p&gt;Pick up a copy of &lt;a href=&quot;http://oreilly.com/catalog/9780596520113&quot;&gt;“Learning Perl”&lt;/a&gt; or just browse the excellent
&lt;em&gt;perldoc&lt;/em&gt; and start coding in Perl right away.&lt;/p&gt;

&lt;h1 id=&quot;clojure&quot;&gt;Clojure&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;Clojure is a Lisp dialect with an unique support for parallel and
concurrent programming and runs on top of the venerable JVM. If you’re
looking to do some serious parallel programming look no further. Other
than that you’ll find in Clojure a superb collection of functional
data structures, pervasive use of laziness, higher order functions and
tail-call optimizations,
and some rather novel ideas on the topics of state and
identity. Clojure also cleans up a bit the traditional Lisp
syntax (read this as Clojure has fewer parentheses than say Common Lisp).&lt;/p&gt;

&lt;p&gt;To get started I recommend you to watch the free Clojure screencasts
on &lt;a href=&quot;http://clojure.blip.tv/&quot;&gt;blip.tv&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;prolog&quot;&gt;Prolog&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;The most famous language from the logic programming family. Solving a
problem like a sudoku puzzle in Prolog will be an eye opening
experience for any developer. While it’s unlikely that you’ll ever use
it practice the ideas found in it, Prolog will truly expand your thinking
horizons.&lt;/p&gt;

&lt;p&gt;A good starting point in your journey to Prolog will be
&lt;a href=&quot;http://www.learnprolognow.org/&quot;&gt;“Learn Prolog Now”&lt;/a&gt;. You may do a
follow up with the collection of programming puzzles &lt;a href=&quot;http://sites.google.com/site/prologsite/prolog-problems/&quot;&gt;“Prolog problems”&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;ruby&quot;&gt;Ruby&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;A pure object oriented dynamic scripting language with a very nice support for
metaprogramming. It has versions written in Java (JRuby) and
.Net (IronRuby) which makes it easy to integrate it with any software
for those popular platforms. The language became popular with the rise of the Ruby
on Rails web framework, but it has many potential applications that don’t
involve RoR or web development. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Programming-Ruby-1-9-Pragmatic-Programmers/dp/1934356085/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1303901367&amp;amp;sr=1-1&quot;&gt;“Programming Ruby”&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/Ruby-Programming-Language-David-Flanagan/dp/0596516177/ref=sr_1_3?s=books&amp;amp;ie=UTF8&amp;amp;qid=1303901367&amp;amp;sr=1-3&quot;&gt;“The Ruby Programming Language”&lt;/a&gt; are two of the
best introductory Ruby books around.&lt;/p&gt;

&lt;h1 id=&quot;python&quot;&gt;Python&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;A pure object oriented dynamic scripting language with a focus on
simplicity, readability and maintainability. Popular for development
of web applications, GUI applications and system administration
utilities. Driven by the motto “There is only one way to do it” and
the philosophy “It comes with battery included”. Python is Google’s
darling and is widely used by the IT giant. &lt;/p&gt;

&lt;p&gt;A nice free on-line book about Python is &lt;a href=&quot;http://diveintopython3.org/&quot;&gt;“Dive into Python 3”&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;c-sharp&quot;&gt;C Sharp&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;The flagman language of the .NET platform. Similar in many aspects to
Java C# is never-the-less ahead then Java in the innovations
department - first to introduce concepts like Generics and Attributes
to the mainstream programmers. It features some nice improvements over
Java like properties, flexible namespaces and limited type inference. &lt;/p&gt;

&lt;p&gt;The primary reason it’s included in this list, however, is simply
the sheer amount of job openings for C# developers. In my home
country (Bulgaria) about a third of all programming positions are C#
related.&lt;/p&gt;

&lt;p&gt;My favourite C# book happens to be
&lt;a href=&quot;http://www.amazon.com/C-Depth-Second-Jon-Skeet/dp/1935182471/ref=sr_1_3?ie=UTF8&amp;amp;qid=1304516334&amp;amp;sr=8-3&quot;&gt;“C# in Depth”&lt;/a&gt;. You
might happen to enjoy it as well.&lt;/p&gt;

&lt;h1 id=&quot;scala&quot;&gt;Scala&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;An interesting blend of pure object orientation and functional
programming with some concurrency support baked in (actors). Of the
current crop of JVM languages, next to Clojure, Scala looks most
promising. It features an advanced static type system (more advanced
than Haskell’s), state of the art Java integration, support for
pattern matching, extractors and other functional goodness. If any
language has a chance of displacing the Java programming language it
must be Scala… Even the father of Java James Gosling acknowledged
that if he decided to replace Java with another language it would be Scala.&lt;/p&gt;

&lt;p&gt;Start your journey to Scala mastery with
&lt;a href=&quot;http://www.artima.com/pins1ed/&quot;&gt;“Programming in Scala”&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;javascript&quot;&gt;JavaScript&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;We cannot conclude this whirlwind tour of notable programming
languages without mentioning the King of the Web, the language that
drove the Web 2.0 revolution - JavaScript. Although it has a terrible
name (JavaScript shares nothing with Java), a questionable programming
model built around mutating global variables, and prototype instead of
class inheritance, it is supported virtually everywhere (most web
browsers have built-in JavaScript interpreters) and any web
developer will do well to learn some JavaScript.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;We cannot be experts in ten or twenty programming languages - I’m
certain of that. I do,
however, believe that all the ideas and techniques that we discover in
different programming languages will generally enrich our thinking and
make us better software engineers in principle.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. If you’re wondering why a certain “great” language X is not on
the list keep in mind that this is my personal(and highly subjective)
point of view on the subject. Who knows, in some dark and twisted
place there may very well be people who consider BASIC and programming
language masterpiece… :-)&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Misc/2011/04/26/thoughts-on-the-kindle</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Misc/2011/04/26/thoughts-on-the-kindle.html"/>
    <title>Thoughts on the Amazon Kindle</title>
    <updated>2011-04-26T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I love reading - I love fiction, I love technical literature, I love
newspapers and magazines. I’m also a bit of old fashioned - I love the
feel and smell of paper, I love the ability to feel the pages. So it
took me quite some time to convince myself to buy one of the fabled
Amazon Kindle e-book reading devices. People often ask me what I think
about it and would I recommend them to buy one so I decided to write
down my thoughts here.&lt;/p&gt;

&lt;h2 id=&quot;the-things-i-love-about-the-kindle&quot;&gt;The things I love about the Kindle&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;# Typography&lt;/p&gt;

&lt;p&gt;The typography of the fiction books on the Kindle is simply amazing -
the fonts and the typesetting are close to perfect. The only thing
that is a bit off is the justification of some lines but this happens
very rarely. Most of the paper books I’ve recently bought have so
terrible typography that they simply appal me.&lt;/p&gt;

&lt;h1 id=&quot;quality-of-images&quot;&gt;Quality of images&lt;/h1&gt;

&lt;p&gt;This one really surprised me - the images and photos look very good on
the Kindle(unless they are very big and have to be scaled down).&lt;/p&gt;

&lt;h1 id=&quot;navigation&quot;&gt;Navigation&lt;/h1&gt;

&lt;p&gt;The navigation is outstanding - I think the idea to double the buttons
for forward/backward page was a brilliant one. The ability to skip
chapters and to easily navigate the table of contents is fairly handy
as well. Unfortunately not all mobi books are created with an useful
table of contents, but this is not a problem of the Kindle itself.&lt;/p&gt;

&lt;h1 id=&quot;built-in-dictionary&quot;&gt;Built-in dictionary&lt;/h1&gt;

&lt;p&gt;Although my knowledge of English is considered quite considerable I’m
no native speaker and when I read fancy books from time to time I
encounter words I do not know. Having the built-in dictionary I can
just move the cursor to the word in question and I see its meaning
inline. This is so very cool!&lt;/p&gt;

&lt;h1 id=&quot;weight--size&quot;&gt;Weight &amp;amp; size&lt;/h1&gt;

&lt;p&gt;The Kindle is smaller and lighter than most paperbacks. And you can
carry literary hundreds of books on your kindle.&lt;/p&gt;

&lt;h1 id=&quot;battery-life&quot;&gt;Battery life&lt;/h1&gt;

&lt;p&gt;Without the wireless the battery lasts for about a month…&lt;/p&gt;

&lt;h1 id=&quot;amazon-kindle-store&quot;&gt;Amazon Kindle store&lt;/h1&gt;

&lt;p&gt;It’s so easy to find and buy the books you want. You have the option
to buy something from the website and it will be automatically sent to
your Kindle or you can find and buy books from the Kindle itself if
you’re connected to the Internet.&lt;/p&gt;

&lt;h1 id=&quot;free-3g&quot;&gt;Free 3G&lt;/h1&gt;

&lt;p&gt;The Amazon Kindle store is always at hand.&lt;/p&gt;

&lt;h1 id=&quot;the-official-lighted-leather-cover&quot;&gt;The official lighted leather cover&lt;/h1&gt;

&lt;p&gt;The
&lt;a href=&quot;http://www.amazon.co.uk/Kindle-Lighted-Leather-Display-Generation/dp/B003DZ165W/ref=sr_1_1?ie=UTF8&amp;amp;qid=1303826907&amp;amp;sr=8-1&quot;&gt;cover&lt;/a&gt;
is made of leather and makes the Kindle appearance quite similar to
that of a real book. It also features LED light powered by the Kindle
itself with which you can easily read even in the darkest
places. Unfortunately it’s very expensive - it costs half as much as
the Kindle…&lt;/p&gt;

&lt;h1 id=&quot;e-ink-screen&quot;&gt;E-ink screen&lt;/h1&gt;

&lt;p&gt;Looks like a real book, immune to sunlight, great contrast.&lt;/p&gt;

&lt;h1 id=&quot;collections&quot;&gt;Collections&lt;/h1&gt;

&lt;p&gt;You can organise your books into collections on various criteria.&lt;/p&gt;

&lt;h1 id=&quot;ebooks-are-generally-cheaper&quot;&gt;Ebooks are generally cheaper&lt;/h1&gt;

&lt;p&gt;This is not true for all books(at least not yet). At least you save
the shipping expenses(if you have any).&lt;/p&gt;

&lt;h1 id=&quot;highlights-and-sharing&quot;&gt;Highlights and sharing&lt;/h1&gt;

&lt;p&gt;You can see passages other people highlighted as interesting and add
highlights and notes yourself. You can also tweet passages and stuff
like that. The Kindle is social…&lt;/p&gt;

&lt;h2 id=&quot;the-things-i-dont-like&quot;&gt;The things I don’t like&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;# PDF support&lt;/p&gt;

&lt;p&gt;It’s so horrible I can barely describe it. Basically PDF are
unreadable and everyone that tell you otherwise is lying to you. The
Kindle DX is large enough to accommodate PDF I guess, but not the
normal Kindle.&lt;/p&gt;

&lt;h1 id=&quot;formatting-is-terrible-in-technical-books&quot;&gt;Formatting is terrible in technical books&lt;/h1&gt;

&lt;p&gt;If you read a lot of books with diagrams, tables, source code, etc the
Kindle is not for you(or at least not for that task). Everything is
scrambled and confusing. Basically this and the previous item made me
buy an iPad 2 for reading PDFs and technical books.&lt;/p&gt;

&lt;h1 id=&quot;the-web-browser-is-mostly-useless&quot;&gt;The web browser is mostly useless&lt;/h1&gt;

&lt;p&gt;The Kindle has an experimental web browser, which is mostly useless
mainly due to the inherent limitation of the e-ink screen(such a
enormous refresh rate). &lt;/p&gt;

&lt;h1 id=&quot;real-page-numbers&quot;&gt;Real page numbers&lt;/h1&gt;

&lt;p&gt;The ability to cross reference paper pages with ebook pages was added
in a recent firmware update, but I haven’t seen any books that have
those page markers.&lt;/p&gt;

&lt;h1 id=&quot;keyboard&quot;&gt;Keyboard&lt;/h1&gt;

&lt;p&gt;Mostly useless, probably a future version with some touchscreen
display would drop it. It just takes up valuable place.&lt;/p&gt;

&lt;h1 id=&quot;screen-is-not-touch-sensitive&quot;&gt;Screen is not touch sensitive&lt;/h1&gt;

&lt;p&gt;In the first day I owned the devices I often tried to turn pages by
swiping the screen. I’m quite fond of touch screen interfaces and one
of those can make the Kindle even smaller. &lt;/p&gt;

&lt;h1 id=&quot;magazines-and-newspapers-are-crippled&quot;&gt;Magazines and newspapers are crippled&lt;/h1&gt;

&lt;p&gt;Because the publishers have to pay some fee to amazon based on the
traffic they generate with their magazines/newspapers the Kindle
version are generally stripped down from a lot of images and other
content.&lt;/p&gt;

&lt;h1 id=&quot;no-easy-way-to-lendborrow-books&quot;&gt;No easy way to lend/borrow books&lt;/h1&gt;

&lt;p&gt;Currently we have services like lendle.me, but they have a very
limited library. Soon the Kindle will have built-in lending support
and this will improve the situation immensely. &lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;Basically the Kindle is the greatest thing after hot water for people
that read a lot of fiction books. Everyone else should consider buying
a tablet.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/Scala/Programming/2011/04/26/jrebel-with-scala</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/Scala/Programming/2011/04/26/jrebel-with-scala.html"/>
    <title>Incremental development with Scala and JRebel</title>
    <updated>2011-04-26T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;One of the things I love most about Lisp development is the ability to
develop applications in an incremental interactive manner - you write
one function, compile it, load into your current REPL session, make
some adjustments and repeat this process until you get satisfactory
results. You never stop to compile your project, you never have to
restart your application server. Without those distractions it’s
easier to maintain your concentration and to remain in the &lt;em&gt;flow&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;With languages like Scala and Java, however, you cannot do this - at
least without a bit of external help. This help comes in the form of an
application called &lt;a href=&quot;http://www.zeroturnaround.com/jrebel/&quot;&gt;JRebel&lt;/a&gt;, which basically reloads the classes in your
program as you make changes to them and recompile them. JRebel is a commercial
application and generally you have to pay to use it… unless you want
to you use it for Scala development, that is. ZeroTurnaround(the
company that makes JRebel) offers
&lt;a href=&quot;http://sales.zeroturnaround.com/wp-content/themes/zeroturnaround4.0/modals/applyForLicense.php&quot;&gt;free licences to Scala developers&lt;/a&gt;
and if you’re one of them you should definitely get one.&lt;/p&gt;

&lt;p&gt;Installing JRebel is trivial - generally you have to only extract a
zip file(or use an installer) somewhere and drop in the JRebel folder
the licence file that they have e-mail you. Afterwards you simply have
to integrate JRebel with your build system. JRebel can also be
integrated with IDEs, but I want cover this here. I use mostly
&lt;a href=&quot;http://maven.apache.org&quot;&gt;Maven 3&lt;/a&gt; and
&lt;a href=&quot;http://code.google.com/p/simple-build-tool/&quot;&gt;SBT&lt;/a&gt; so I’ll show you
what to do for them. With Maven you have to add the following to the
&lt;em&gt;$MAVEN_OPTS&lt;/em&gt; environmental variable:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;export MAVEN_OPTS=-noverify -javaagent:/home/bozhidar/work/jrebel/jrebel.jar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since most people use JRebel for web development to avoid the need to
restart their application containers and Scala’s most prominent
framework is &lt;a href=&quot;http://liftweb.net&quot;&gt;Lift&lt;/a&gt; you’d probably want to enable
the JRebel Lift plug-in as well:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;export MAVEN_OPTS=-noverify -javaagent:/home/bozhidar/work/jrebel/jrebel.jar&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; -Drebel.lift_plugin=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Stick this in your shell’s init file and source it to make it
available in the shell.&lt;/p&gt;

&lt;p&gt;Now when you start your web app with&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;mvn jetty:run&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the continuous Scala compilation with&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;mvn scala:cc&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The compiler with pickup the changes you made and JRebel will reload
the changed classes behind the scenes. The development process this
way starts to feel a bit like using a scripting language such as Ruby
or PHP.&lt;/p&gt;

&lt;p&gt;If you’re using SBT you should modify the sbt startup script to
include the same options that I mentioned in the section about Maven
configuration. Mine sbt script looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt;!/bin/bash

&lt;span class=&quot;go&quot;&gt;java -noverify -javaagent:/home/bozhidar/work/jrebel/jrebel.jar&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; -Drebel.lift_plugin=true -XX:+CMSClassUnloadingEnabled&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; -XX:MaxPermSize=512m -Xmx512M -Xss2M -jar `dirname $0`/sbt-launch.jar&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; &amp;quot;$@&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Another use for JRebel is the Scala REPL itself. When you start the
REPL from inside SBT for instance with the command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;sbt console&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;changes to the imported classes will be reflected automatically
without the need to do a &lt;em&gt;:replay&lt;/em&gt; or restart the REPL - something
reminiscent of the interactive Lisp programming I mentioned earlier.&lt;/p&gt;

&lt;p&gt;So what are you waiting for? Go grab JRebel and speed up your Scala
development process.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Programming/Emacs/2011/04/24/emacs-dev-kit</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Programming/Emacs/2011/04/24/emacs-dev-kit.html"/>
    <title>Emacs Dev Kit</title>
    <updated>2011-04-24T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;During the past few months I’ve been working on a project to convert
my vast Emacs configuration into something generally useful and
self-contained that could help the general software engineer. Thus the
&lt;a href=&quot;https://github.com/bbatsov/emacs-dev-kit&quot;&gt;Emacs Dev Kit&lt;/a&gt; was
born. Conceptually it’s similar to the older
&lt;a href=&quot;https://github.com/technomancy/emacs-starter-kit&quot;&gt;Emacs Starter Kit&lt;/a&gt;
and it even shares a bit of code with it. The Emacs Dev Kit, however,
target more programming languages and features more
customizations/enhancements.&lt;/p&gt;

&lt;p&gt;EDT relies on ELPA for packages that are available there and packages
everything else locally. At some point I’ve played with the idea of
using el-get instead, but I had a lot of problems with it and thought
that using only ELPA would be better since it would be part of
Emacs 24. Everything is tested only on the latest version of GNU
Emacs(currently 23.2). I’ve tried to do everything in the most
efficient and modern way - for instance SLIME is supposed to be
installed via Quicklisp so it could be easily updated without waiting
for a new version of the EDK. &lt;/p&gt;

&lt;p&gt;EDK currently offers enhanced(well, I know that this is subjective,
but it feels enhanced at least to me) support for the following
languages:
* C/C++
* Clojure
* Common Lisp
* Emacs Lisp
* Haskell
* Java
* LaTeX
* Perl
* Prolog
* Python
* Ruby
* Scala
* Scheme
* XML&lt;/p&gt;

&lt;p&gt;It also offers an advanced ERC configuration(so that you can ask your
questions on #freenode), extended keybindings and lots of general
purpose utility functions.&lt;/p&gt;

&lt;p&gt;EDT goes a step further and even includes a different color-theme by
default - zenburn. You can turn it off easily of course, but I have
the feeling that many programmers will appreciate its eye strain
reducing qualities.&lt;/p&gt;

&lt;p&gt;The project is still very young and mostly untested. I’d be thankful
for feedback, bug reports and suggestions.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Jekyll/2011/04/24/add-atom-feed-to-jekyll</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Jekyll/2011/04/24/add-atom-feed-to-jekyll.html"/>
    <title>Add Atom feed to Jekyll powered blog</title>
    <updated>2011-04-24T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;As you know I’ve recently migrated my blog from WordPress to
Jekyll. One of the things I had to do was add an Atom feed(RSS
sucks). It was quite the easy task. I just had to create an
&lt;a href=&quot;https://github.com/bbatsov/blog/blob/master/atom.xml&quot;&gt;atom.xml&lt;/a&gt; file
and place in the root of my blog.&lt;/p&gt;

&lt;p&gt;Afterwards I only had to link my default layout to the atom feed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;application/atom+xml&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;atom.xml&amp;quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Atom feed&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At this point I was able to subscribe to my new atom feed(and
hopefully my followers(which I may or may not have) were able to do
the same).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Misc/Jekyll/2011/04/23/moving-to-jekyll</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Misc/Jekyll/2011/04/23/moving-to-jekyll.html"/>
    <title>Moving from WordPress to Jekyll</title>
    <updated>2011-04-23T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;This is my first post after a very long hiatus partially induced by a
migration of my blog from WordPress to
&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;, which I started half an
year ago and never quite finished(until today, that is).&lt;/p&gt;

&lt;p&gt;I wasn’t particularly unhappy with WordPress, but some things there
irritated me - for instance it was hard to edit my posts within my
beloved Emacs(and yes - I know all the options and I hate them
all). Accidentally I’ve stumbled upon the post
&lt;a href=&quot;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot;&gt;“Bloggin like a hacker”&lt;/a&gt;
and I instantly knew Jekyll was what I needed. It allows me to create
my posts as simple markdown templates, allows me to embed logic
written in Ruby in them and it has built-in support for code
highlighting(using the excellent Python library &lt;em&gt;pygments&lt;/em&gt;). It also
allows me to store my blog under version control in github which is
really nice.&lt;/p&gt;

&lt;p&gt;Jekyll is not particularly well documented and I had a few problems
with it at first, but I managed to overcome them all. One thing that
will be problematic for some users is the need to add things like rss,
commenting and analytics manually(they are bundled in a solution like
WordPress). On the other hand - you’re not tied to anything in
particular and may choose the service you like the most. I chose
&lt;a href=&quot;http://disqus.com&quot;&gt;Disqus&lt;/a&gt; for the comments and Google Analytics for the site
analytics(what a surprise).&lt;/p&gt;

&lt;p&gt;By the way - my old blog Devcraft is no more. My new blog has a new
domain and a new theme(based on my favourite coding theme
&lt;a href=&quot;https://github.com/bbatsov/zenburn-emacs&quot;&gt;Zenburn&lt;/a&gt;).  I know that the
blog is currently pig ugly and the content is not particularly great
either, but I’ll try to improve this along the way and add a lot of
interesting and hopefully useful information.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Misc/LaTeX/2010/09/07/cv-in-latex</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Misc/LaTeX/2010/09/07/cv-in-latex.html"/>
    <title>My professional CV in LaTeX</title>
    <updated>2010-09-07T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;After a long period of planning I finally migrated my professional CV
from Word to LaTeX last weekend. Since I live in the European Union I
used the &lt;a href=&quot;http://www.ctan.org/tex-archive/macros/latex/contrib/europecv/&quot;&gt;europecv&lt;/a&gt; LaTeX class.&lt;/p&gt;

&lt;p&gt;I’ve uploaded the LaTeX code into &lt;a href=&quot;http://github.com/bbatsov/cv&quot;&gt;GitHub&lt;/a&gt; feel free to borrow it for
your CVs if you like it. You’ll have to compile the &lt;strong&gt;master.tex&lt;/strong&gt; file
with &lt;strong&gt;pdflatex&lt;/strong&gt; to get a nicely formatted pdf version of the CV.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Fedora/Linux/Hardware/2010/05/26/3d-support-nouveau-fedora-13</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Fedora/Linux/Hardware/2010/05/26/3d-support-nouveau-fedora-13.html"/>
    <title>Enabling 3D support for Nouveau in Fedora 13</title>
    <updated>2010-05-26T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Most of you probably have heard that Fedora 13 will feature
experimental 3D support for the Nouveau open source driver for Nvidia
cards. This support, however, is not enabled by default. To enable it
you need to install the mesa-dri-drivers-experimental package. I,
personally, do it like this(if you haven’t configured sudo, you’ll
have to perform this as root):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;sudo yum install mesa-dri-drivers-experimental&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Afterwards you can enable Compuz, play chromium-bsu or whatever your heart desires.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/NetBeans/2010/04/19/changing-laf-in-netbeans</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/NetBeans/2010/04/19/changing-laf-in-netbeans.html"/>
    <title>Changing the look & feel in NetBeans 6.8</title>
    <updated>2010-04-19T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Recently I’ve been trying to switch my work environment theme to
something with lower contrast(notably the excellent zenburn theme for
emacs, vim, gnome terminal, gnome, etc). Swing
applications however have difficulties with GTK themes when they are
using the GTK+ look &amp;amp; feel so I’ve decided to go to Nimbus – the new
default look &amp;amp; feel for Java apps since Java 6 Update 10.&lt;/p&gt;

&lt;p&gt;The only problem with the plan was that there is no way to change the
look and feel inside NetBeans – it had to be done by changing it’s
configuration. This is done fairly easy. Just find the file
/etc/netbeans.conf in NetBeans’s installation folder and append this to
the netbeans_default_options section:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;--laf Nimbus&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you just have to (re)start NetBeans and you can enjoy Nimbus. More
information about look &amp;amp; feels in NetBeans can be found here.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/Swing/2010/02/26/enable-aa-in-swing</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/Swing/2010/02/26/enable-aa-in-swing.html"/>
    <title>How to enable font anti-aliasing in a Java Swing app</title>
    <updated>2010-02-26T00:00:00+02:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;If you have access to the source, you can do this in the main method:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// enable anti-aliasing&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;awt.useSystemAAFontSettings&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;on&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;swing.aatext&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Alternatively (and if you do not have access to the source, or if you find this
easier) you can simply pass the system properties above to the JVM by
adding these options to the command line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;-Dawt.useSystemAAFontSettings=on -Dswing.aatext=true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/Swing/2009/12/18/center-jdialog-over-jframe</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/Swing/2009/12/18/center-jdialog-over-jframe.html"/>
    <title>How to center a JDialog over a JFrame in Swing</title>
    <updated>2009-12-18T00:00:00+02:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I always thought that the fact that JDialogs accepted a parent frame
as a constructor argument was the thing, that would make the dialog’s
position relative to that of the frame:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;awt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Frame&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Unfortunately all of my freshly opened dialogs would appear in the
upper left angle of my screen, not centered over the parent JFrame. I
looked around and found out that I simply needed one more method call
per dialog:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;theDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setLocationRelativeTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You need to call this method before the JDialog’s show() method. Now
everything is perfect and the dialog appears always right above the
center of the frame.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Emacs/Linux/2009/12/05/menubar-emacs</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Emacs/Linux/2009/12/05/menubar-emacs.html"/>
    <title>Accessing the menu bar in Emacs</title>
    <updated>2009-12-05T00:00:00+02:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Have you ever been wondering how to access the Emacs menu bar, when
using Emacs in console mode? The answer is easy - press &lt;strong&gt;F10&lt;/strong&gt; or type
&lt;strong&gt;M-x menu-bar-open&lt;/strong&gt;(both methods work in X as well, of course).&lt;/p&gt;

&lt;p&gt;Although the menu bar is rarely used by seasoned Emacs veterans,
exploring it is a great way to get started with the capabilities of
the new modes, so being able to access it is generally a good thing.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Z Shell/Linux/2009/12/05/execute-stuff-after-zsh-login</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Z Shell/Linux/2009/12/05/execute-stuff-after-zsh-login.html"/>
    <title>Automatically execute programs after zsh login</title>
    <updated>2009-12-05T00:00:00+02:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Sometimes you may want to start a couple of programs just after an
interactive login to your favourite shell, which in my case would be
zsh. &lt;/p&gt;

&lt;p&gt;For example - I use Emacs as daemon process(emacs –daemon). I cannot use an init
script to start it since the daemon is usable on a per user basis. The
solution in this case is really simple - just create a &lt;strong&gt;.zlogin&lt;/strong&gt; file in
your home folder and put in it all the commands you want executed
after you’ve logged into the shell. In my case I put:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;emacs --daemon
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;there and as soon as I’m logged in, the Emacs daemon is up waiting for
incoming connections.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Hardware/Fedora/Linux/2009/09/25/xerox-phaser-3117-fedora</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Hardware/Fedora/Linux/2009/09/25/xerox-phaser-3117-fedora.html"/>
    <title>Using Xerox Phaser 3117 on Fedora</title>
    <updated>2009-09-25T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;The driver selected by default by Fedora 11 is not appropriate for
Xerox Phaser 3117 - it will not print with it. However there is a very
easy solution to the problem.&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;System -&amp;gt; Administration -&amp;gt; Printing&lt;/strong&gt; (In GNOME at least, in KDE
it’s probably something similar). Right click the Xerox Phaser 3117
printer icon there and select “Properties” from the menu. Then in the
“Make and model” section choose change and then select Samsung
ML-1710.&lt;/p&gt;

&lt;p&gt;After you apply the change you’ve just made, you can start printing
with your Phaser.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/JBoss/2009/09/03/jboss-jvm-params</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/JBoss/2009/09/03/jboss-jvm-params.html"/>
    <title>Mofidy JVM parameters for JBoss AS</title>
    <updated>2009-09-03T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Most people have been in a situation requiring them to change one or
more of the parameters passed to the JVM on top of which JBoss AS is
running. For instance - you may need a bigger heap, bigger perm gen
size or something else. The best place to put these parameters is
probably the following file:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;$JBOSS_HOME/bin/run.conf&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;where &lt;strong&gt;$JBOSS_HOME&lt;/strong&gt; refers to the directory in which you’ve unpacked the JBoss AS distribution.&lt;/p&gt;

&lt;p&gt;Look for this section:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;if [ &amp;quot;x$JAVA_OPTS&amp;quot; = &amp;quot;x&amp;quot; ]; then&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    JAVA_OPTS=&amp;quot;...&amp;quot;&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;All you have to do now is adapt it to your needs.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Emacs/Git/2009/07/19/dotemacs-github</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Emacs/Git/2009/07/19/dotemacs-github.html"/>
    <title>Emacs configuration in github</title>
    <updated>2009-07-19T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;When you have applications, whose configuration is as complex as that
of Emacs it’s always a good idea to store that configuration under
version control so you can easily share it between multiple
computers. You can always set up some version control system yourself,
but it’s a lot more convenient (and much more reliable) to use an
already existing code hosting solution such a GitHub. I have created a
small repo there housing my humble Emacs configuration(.emacs, some
custom stuff) and this way I can easily access it on all the computers
that I happen to be working on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At some point my custom configuration grew into what is known today as
the &lt;a href=&quot;https://github.com/bbatsov/emacs-dev-kit&quot;&gt;Emacs Dev Kit&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Fedora/Linux/2009/07/14/yum-provides</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Fedora/Linux/2009/07/14/yum-provides.html"/>
    <title>Find out quickly which package provides a certain library with YUM</title>
    <updated>2009-07-14T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;One of the most dreaded things that you can see while trying to run
some application or trying to install an rpm package is a message
saying that some required library is missing.&lt;/p&gt;

&lt;p&gt;Generally this is not a big problem, because most often the library
that you miss is packaged in a package named similarly to the
library. Sometime however this is not the case… Suppose for example
that you’re trying to install IBM JDK 5.0 on a Fedora 11 box. You’ll
most likely get the following error message:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;error: Failed dependencies:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;libstdc++.so.5 is needed by ibm-java2-i386-sdk-5.0-9.0.i386&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and there is no package named libstdc++ that you can install, so how
can you find out which package do you need?&lt;/p&gt;

&lt;p&gt;The answer is simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; yum provides libstdc++.so.5

&lt;span class=&quot;go&quot;&gt;Loaded plugins: fastestmirror, presto, refresh-packagekit&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;compat-libstdc++-33-3.2.3-66.i586 : Compatibility standard C++ libraries&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Repo        : fedora&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Matched from:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Other       : libstdc++.so.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pretty neat, eh? &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/Eclipse/2009/07/13/java-type-indicators-eclipse</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/Eclipse/2009/07/13/java-type-indicators-eclipse.html"/>
    <title>Java type indicators in Eclipse</title>
    <updated>2009-07-13T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;One of the things that I don’t like about the default Eclipse settings for Java
development is that in the package explorer all Java files appear in the
same manner(with the same icon). There is no visual distinction between abstract and concrete classes, enums, interfaces… Luckily for us Eclipse supports such a distinction and all you have to do is enable it.&lt;/p&gt;

&lt;p&gt;Go to&lt;/p&gt;

&lt;p&gt;Window -&amp;gt; Preferences -&amp;gt; General -&amp;gt; Appearance -&amp;gt; Label Decorations&lt;/p&gt;

&lt;p&gt;and mark the check box saying “Java Type Indicator”. I’ve tested this on Eclipse 3.5 only, but I guess it is included in previous releases as well.&lt;/p&gt;

&lt;p&gt;Eclipse, though not as feature rich as IntelliJ IDEA, offers a lot of features that one has to find for himself.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Emacs/IntelliJ/2009/05/19/emacs-shift-return</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Emacs/IntelliJ/2009/05/19/emacs-shift-return.html"/>
    <title>Emulate the behaviour of Return+Shift(insert new line) from popular IDEs(IDEA, Eclipse) in Emacs</title>
    <updated>2009-05-19T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I’m very fond of the ability to insert a new line below the line I’m
currently at, and to position the cursor at the beginning of that new
line, offered by most IDEs, such as IntelliJ IDEA, Eclipse. It’s
usually bound to Return(Enter)+Shift. Emacs(as far as I know) doesn’t
have a function that does this thing by default, but one can easily
create one, combining several well known functions in the process and
bind that new function to the desired key combination. Here’s the
snippet one might have in his .emacs(or other) “configuration” file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;cl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;;; insert an empty line after the current line and position the cursor on its beginning&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;defun&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;insert-empty-line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;interactive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;move-end-of-line&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;open-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next-line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;global-set-key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;&amp;#39;insert-empty-line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/2009/05/04/switch-string-idiom-java</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/2009/05/04/switch-string-idiom-java.html"/>
    <title>A switch on String idiom for Java</title>
    <updated>2009-05-04T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I’ve always been frustrated with the inability to write a switch on
String in Java.  However the enum type introduced in Java 5.0 somewhat
diminishes the issue. Read this excellent
&lt;a href=&quot;http://www.xefer.com/2006/12/switchonstring&quot;&gt;article&lt;/a&gt; on the subject.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Java/Ruby/Design Patterns/2008/09/29/singleton-java-ruby</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Java/Ruby/Design Patterns/2008/09/29/singleton-java-ruby.html"/>
    <title>The best way to implement the Singleton pattern in Java and Ruby</title>
    <updated>2008-09-29T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;I haven’t posted anything lately, but I just received my brand new
&lt;strong&gt;Das Keyboard&lt;/strong&gt; and now I simply can’t stop typing. Recently I’ve been
going through some effective technics to implement popular design
patterns and I was surprised to see how few people where aware of
them. For example since Java 5 the best way to implement the Singleton
pattern is simply to use an enum like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is possible due to the fact that in Java(unlike in C++ and C#)
enums are full-blown classes(although they do not support features
like inheritance for example). You get an added bonus when using an
enum class – you do not have to worry about serialization – this is
handled for you behind the scenes.&lt;/p&gt;

&lt;p&gt;And this is how one should implement the Singleton pattern in Ruby:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;singleton&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Some&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Singleton&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Through the magic of Ruby’s mix-ins you get a private constructor for
your class and an instance method with which you can obtain a
reference to the single instance of the class. And best of all –
because this library has undergone a substantial degree of testing it
is pretty much bulletproof. Things hardly get simpler than that.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Z Shell/Linux/2008/07/27/zsh-prompt</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Z Shell/Linux/2008/07/27/zsh-prompt.html"/>
    <title>A nice zsh prompt</title>
    <updated>2008-07-27T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Recently I switched to zsh, after being a bash user for almost 5
years. I was in love with everything in zsh from day one, except one
thing – the default prompt. Although zsh ships with several prompt
themes, I didn’t like any of them so I looked around a little bit and
constructed my own humble prompt. Here it goes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;PROMPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;[%n@%m %~]$ &amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In case you’re wondering what this gibberish means:&lt;/p&gt;

&lt;p&gt;%n stands for your username(e.g. bozhidar)&lt;/p&gt;

&lt;p&gt;%m stands for the first part of your machine’s hostname(you can use %M
 for the fully qualified name)&lt;/p&gt;

&lt;p&gt;%~ stands for the current directory path with your home dir aliased
 with an ‘~’ (if you want to see the path in its natural form use %d
 instead)&lt;/p&gt;

&lt;p&gt;All of this strange looking character combinations are called “escape
sequences” and they have special significance to zsh. The rest of the
characters in the prompt definition are represented literally in the
resulting prompt. It looks like this(on my machine):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;[bozhidar@drow ~/store]$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you like it simply put the prompt definition like in your .zshrc
file. You may want to put a little bit different version of the prompt
in the root user’s .zshrc(if you use root at all that is):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;PROMPT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;[%n@%m %~]# &amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This follows the well established pattern that a normal shell and a
root shell should be easily distinguished visually.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Ruby/Emacs/Rails/2008/06/19/emacs-rails</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Ruby/Emacs/Rails/2008/06/19/emacs-rails.html"/>
    <title>Using Emacs for Rails development: The perfect setup</title>
    <updated>2008-06-19T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Updated 29/04/2011&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Lately, I’ve started digging more and more into Rails, preparing for
the start of a Rails powered project. Although there are some IDEs
offering decent Rails support(namely RubyMine, NetBeans, Komodo and
Aptana Studio) I have always preferred the comfort of Emacs for
various reasons. So naturally I embarked on a quest to setup a
suitable environment for Rails development in Emacs. After a couple of
days of searching and evaluating possible solutions I finally set up a
worthy environment. It consists of a couple of components –
&lt;a href=&quot;http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/misc/ruby-mode.el?view=log&quot;&gt;ruby-mode&lt;/a&gt;,
&lt;a href=&quot;http://svn.ruby-lang.org/cgi-bin/viewvc.cgi/trunk/misc/inf-ruby.el?view=log&quot;&gt;inf-ruby&lt;/a&gt;,
&lt;a href=&quot;http://code.google.com/p/autopair/&quot;&gt;autopair-mode&lt;/a&gt;,
&lt;a href=&quot;http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html&quot;&gt;nxhtml-mode&lt;/a&gt;,
&lt;a href=&quot;http://code.google.com/p/yasnippet/&quot;&gt;yasnippet&lt;/a&gt; and
&lt;a href=&quot;http://rinari.rubyforge.org/&quot;&gt;rinari&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you probably have guessed by now &lt;em&gt;ruby-mode&lt;/em&gt; provides support for
editing ruby source files. The mode is pretty feature complete and
under active development, headed by none other than Matz(Ruby’s
creator) himself. I can only assume that Matz is an Emacs user
himself. You can get it from the ruby svn repository if you’re using a
version of Emacs older than Emacs 23(it’s built-in there).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;inf-ruby&lt;/em&gt; is a mode that spawns and inferior ruby process(irb shell)
to which you can directly send code from the ruby buffer you’re
currently editing. For instance - you can define a function and while
your cursor is inside it you can press C-M-x - the function definition
will be evaluated in irb automatically and you can test it there. This
is extremely handy!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;autopair-mode&lt;/em&gt; provides auto insertion of closing braces, quotes,
ends, etc. . Instructions how to setup both modes can be found
here. It’s a much more generic version of the &lt;em&gt;ruby-electric&lt;/em&gt; mode
that used to do similar tasks, but just in Ruby buffers.&lt;/p&gt;

&lt;p&gt;Although many people recommend adding pabbrev(a mode which
provides auto-completion) to the setup, I don’t recommend it – I find
the mode mostly annoying and stick to the old school dumb
auto-completion with M-/ . If you’re shopping for autocompletion,
however, a much better and smarter choice would be a
RSense[http://cx4a.org/software/rsense/].&lt;/p&gt;

&lt;p&gt;&lt;em&gt;yasnippet&lt;/em&gt; is a package that offers dynamically expandable code
snippets(template), quite similar to ones in TextMate. It’s very easy
to add your very own snippets if you wish to.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;nxhtml-mode&lt;/em&gt; is a pretty comprehensive package for web development in
general. We need it for its excellent support for erb
templates(.rhtml, .erb.html) and of course xhtml and css. Lately it’s
not been as actively developed as it used to be, but it’s still a
pretty good mode. Alternatively you can use
&lt;a href=&quot;https://github.com/nex3/haml&quot;&gt;Haml&lt;/a&gt; and
&lt;a href=&quot;https://github.com/antonj/scss-mode&quot;&gt;SASS&lt;/a&gt; and forget about
nxhtml. Both have pretty decent Emacs modes available.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;rinari&lt;/em&gt; is a mode for Rails development – it contains rich
functionality such as the ability to easily navigate between models,
views and controllers in a Rails apfplication amongst other
features. Instructions how to set up rinari together with nxhtml-mode
can be found on rinari’s home page. &lt;/p&gt;

&lt;p&gt;It’s always a good idea to add &lt;a href=&quot;http://ecb.sourceforge.net/&quot;&gt;ecb&lt;/a&gt;(the Emacs code browser) to the mix,
though this is entirely optional.&lt;/p&gt;

&lt;p&gt;A lot of the stuff I discussed here are part of the
&lt;a href=&quot;https://github.com/bbatsov/emacs-dev-kit&quot;&gt;Emacs Dev Kit&lt;/a&gt; that I
develop and maintain. I urge you to use the EDK as a starting point to
develop your very own customized version of Emacs. EDK comes with a
few ruby-mode customizations, yari(ri integration for Emacs), haml and
sass modes, autopair, yaml-mode, yasnippet, css-mode, ecb and a lot of
other goodies(find-file-in-project being one of my favourites). &lt;/p&gt;

&lt;p&gt;I hope you enjoy this setup and it helps boost your Rails productivity in Emacs.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Hardware/2008/06/16/das-keyboard</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Hardware/2008/06/16/das-keyboard.html"/>
    <title>Das Keyboard</title>
    <updated>2008-06-16T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Every professional developer knows how important to the development
process the keyboard is, so it is only natural to be on the look for
some quality piece of hardware. After a long research in the area of
good keyboards I decided to upgrade my current rig to the recently
released &lt;a href=&quot;http://www.daskeyboard.com/&quot;&gt;“Das Keyboard 3”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Das Keyboard comes in three flavours - Professional(mechanical
keyboard with labelled keys), Ultimate(the original mechanical
keyboard with blank keys) and Silent(mechanical keyboard with labelled
keys that doesn’t produce the trademarked clicking sound of the
original Das Keyboard).&lt;/p&gt;

&lt;p&gt;I bought the Ultimate model, of course. I’ve been a touch typist for
several years now and I didn’t really cared about the labelled
keys(though I did miss them in games). Two words describe this
keyboard perfectly - &lt;strong&gt;Bad Ass&lt;/strong&gt;. It’s without a doubt the single
finest piece of keyboard hardware that I’ve touched, it’s very
comfortable, very solid and I feel that I’ve actually improved my
typing speed with it. My colleagues don’t like the noisy work of the
keyboard very much, but I have no problems with it. I actually have
grown quite fond of it.&lt;/p&gt;

&lt;p&gt;The keyboard also features a two port USB hub, that I didn’t really
consider when I was buying it, but it turned out quite helpful. I’ve
actually stopped using the USB ports of my computer entirely(except
for input devices) - I use the keyboard hub to plug-in flash drives
and charge devices. When your computer is sitting beneath a desk you
learn to appreciate USB hubs very quickly. &lt;/p&gt;

&lt;p&gt;I have long heard stories about Das Keyboard’s quality
and comfort and I it has totally lived up to its hype. They price is
admittedly a bit steep(I bought two keyboards for home and for work
each costing 130$), but this is our hands and productivity we’re
talking about so we shouldn’t be cheap. So what are
waiting for - research the market yourselves and make your pick, your
hands deserve a quality keyboard(the Das Keyboard)!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <id>http://www.batsov.com/Misc/2008/05/05/first-post</id>
    <link type="text/html" rel="alternate" href="http://www.batsov.com/Misc/2008/05/05/first-post.html"/>
    <title>Every blog has its first post...</title>
    <updated>2008-05-05T00:00:00+03:00</updated>
    <author>
      <name>Bozhidar Batsov</name>
      <uri>http://www.batsov.com/</uri>
    </author>
    <content type="html">&lt;p&gt;Hello, everyone! Welcome to my blog! &lt;/p&gt;

&lt;p&gt;I’ll post here bits and pieces inspired by my humble experience as a
software developer. Expect to see here primarily stuff about Java and
Ruby, but also about software development in general. &lt;/p&gt;

&lt;p&gt;As a fan of the Star Wars franchise I often like to quote characters
from the movies. I feel that this is the time for one such quote –
“Always two there are, no more, no less. A master and an
apprentice.”. I’m no dev wizard by any means, but I hope that I can
help someone learn something helpful and maybe I’ll learn something
from the readers of my blog(if I have any that is:)). In this sense
one can say that in life we’re always the master and the apprentice at
the same time… &lt;/p&gt;

&lt;p&gt;I hope you’ll enjoy reading my blog!&lt;/p&gt;
</content>
  </entry>
  
 
</feed>
